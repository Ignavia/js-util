[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Cloneable.js",
    "memberof": null,
    "longname": "src/Cloneable.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Cloner from \"./Cloner.js\";\r\n\r\n/**\r\n * Contains symbols for the methods of the Cloneable interface.\r\n *\r\n * @type {Object}\r\n */\r\nexport const cloneableSymbols = {\r\n    clone: Symbol(\"clone\")\r\n};\r\n\r\n/**\r\n * A mixin for Cloneable behavior. The keys of the methods are the symbols\r\n * defined in {@link cloneableSymbols}.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, cloneableMixin);\r\n * const myObject = new MyClass();\r\n * const clone    = myObject[cloneableSymbols.clone];\r\n */\r\nexport const cloneableMixin = {\r\n    [cloneableSymbols.clone](cloner = new Cloner()) {\r\n        return cloner.clone(this);\r\n    }\r\n};\r\n\r\n/**\r\n * In addition to everything {@link cloneableMixin} offers this mixin also\r\n * provides an easier to use interface. It adds methods with names that\r\n * correspond to the keys in {@link cloneableSymbols}.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, cloneableExtendedMixin);\r\n * const myObject = new MyClass();\r\n * const clone    = myObject.clone();\r\n */\r\nexport const cloneableExtendedMixin = Object.assign({\r\n    clone: cloneableMixin[cloneableSymbols.clone]\r\n}, cloneableMixin);\r\n\r\n// /**\r\n//  * An interface for every object that can be cloned.\r\n//  *\r\n//  * @interface\r\n//  */\r\n// class Cloneable {\r\n\r\n//     /**\r\n//      * Returns a copy of this object.\r\n//      *\r\n//      * @return {*}\r\n//      * A copy of this object.\r\n//      */\r\n//     [cloneableSymbols.clone]() {}\r\n// }"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cloneableSymbols",
    "memberof": "src/Cloneable.js",
    "longname": "src/Cloneable.js~cloneableSymbols",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Cloneable.js",
    "importStyle": "{cloneableSymbols}",
    "description": "Contains symbols for the methods of the Cloneable interface.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cloneableMixin",
    "memberof": "src/Cloneable.js",
    "longname": "src/Cloneable.js~cloneableMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Cloneable.js",
    "importStyle": "{cloneableMixin}",
    "description": "A mixin for Cloneable behavior. The keys of the methods are the symbols\ndefined in {@link cloneableSymbols}.",
    "examples": [
      "Object.assign(MyClass.prototype, cloneableMixin);\nconst myObject = new MyClass();\nconst clone    = myObject[cloneableSymbols.clone];"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cloneableExtendedMixin",
    "memberof": "src/Cloneable.js",
    "longname": "src/Cloneable.js~cloneableExtendedMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Cloneable.js",
    "importStyle": "{cloneableExtendedMixin}",
    "description": "In addition to everything {@link cloneableMixin} offers this mixin also\nprovides an easier to use interface. It adds methods with names that\ncorrespond to the keys in {@link cloneableSymbols}.",
    "examples": [
      "Object.assign(MyClass.prototype, cloneableExtendedMixin);\nconst myObject = new MyClass();\nconst clone    = myObject.clone();"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Cloner.js",
    "memberof": null,
    "longname": "src/Cloner.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash/fp\";\r\n\r\nimport {cloneableSymbols} from \"./Cloneable.js\";\r\n\r\n/**\r\n * A class to clone primitive values (type undefined, boolean, number, string,\r\n * symbol of function) and acyclic or cyclic arrays and objects. There is some\r\n * special support for Date and RegExp objects.\r\n */\r\nexport default class Cloner {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * How deep calls to the clone method are nested.\r\n         *\r\n         * @type {Number}\r\n         * @private\r\n         */\r\n        this.recursionLevel = 0;\r\n\r\n        /**\r\n         * A mapping from original objects to their clones.\r\n         *\r\n         * @type {Map<Object, Object>}\r\n         * @private\r\n         */\r\n        this.context = new Map();\r\n    }\r\n\r\n    /**\r\n     * Tries to clone the given parameter.\r\n     *\r\n     * @param {*} p\r\n     * The value to clone.\r\n     *\r\n     * @return {*}\r\n     * A clone of the value.\r\n     *\r\n     * @throws {Error}\r\n     * If the cloning fails because a type was not supported.\r\n     */\r\n    clone(p) {\r\n        let result;\r\n\r\n        this.recursionLevel++;\r\n        if (this.isPrimitive(p)) {\r\n            result = p;\r\n        } else if (this.context.has(p)) {\r\n            result = this.context.get(p);\r\n        } else if (_.isDate(p)) {\r\n            result = this.cloneDate(p);\r\n        } else if (_.isRegExp(p)) {\r\n            result = this.cloneRegExp(p);\r\n        } else if (_.isArray(p)) {\r\n            result = this.cloneArray(p);\r\n        } else if (_.isObject(p)) {\r\n            result = this.cloneObject(p);\r\n        } else {\r\n            throw new Error(`${p} cannot be cloned.`);\r\n        }\r\n        this.recursionLevel--;\r\n        this.cleanup();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Tests if the given parameter is just a primitive value, i. e. it is not\r\n     * an object or null.\r\n     *\r\n     * @param {*} p\r\n     * The parameter to test.\r\n     *\r\n     * @return {Boolean}\r\n     * If the given parameter is primitive.\r\n     *\r\n     * @private\r\n     */\r\n    isPrimitive(p) {\r\n        return p === null || typeof p !== \"object\";\r\n    }\r\n\r\n    /**\r\n     * Clones a Date object\r\n     *\r\n     * @param {Date} date\r\n     * The Date object to clone.\r\n     *\r\n     * @return {Date}\r\n     * A clone of the Date object.\r\n     *\r\n     * @private\r\n     */\r\n    cloneDate(date) {\r\n        let result = new Date(date.getTime());\r\n        this.context.set(date, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones a RegExp object.\r\n     *\r\n     * @param {RegExp} regExp\r\n     * The RegExp object to clone.\r\n     *\r\n     * @return {RegExp}\r\n     * A clone of the RegExp object.\r\n     *\r\n     * @private\r\n     */\r\n    cloneRegExp(regExp) {\r\n        let result = new RegExp(regExp);\r\n        this.context.set(regExp, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones an array.\r\n     *\r\n     * @param {Array} arr\r\n     * The array to clone.\r\n     *\r\n     * @return {Array}\r\n     * A clone of the array.\r\n     *\r\n     * @private\r\n     */\r\n    cloneArray(arr) {\r\n        let result = [];\r\n        this.context.set(arr, result);\r\n        for (let v of arr) {\r\n            result.push(this.cloneChild(v));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones an object.\r\n     *\r\n     * @param {Object} obj\r\n     * The object to clone.\r\n     *\r\n     * @return {Object}\r\n     * A clone of the object.\r\n     *\r\n     * @private\r\n     */\r\n    cloneObject(obj) {\r\n        let result = {};\r\n        this.context.set(obj, result);\r\n        for (let [k, v] of Object.entries(obj)) {\r\n            result[k] = this.cloneChild(v);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones a value in a container.\r\n     *\r\n     * @param {*} child\r\n     * The value to clone.\r\n     *\r\n     * @return {*}\r\n     * A clone of the value.\r\n     *\r\n     * @private\r\n     */\r\n    cloneChild(child) {\r\n        return this.isCloneable(child) ? this.cloneCloneable(child) : this.clone(child);\r\n    }\r\n\r\n    /**\r\n     * Tests if the given parameter implements the Cloneable interface.\r\n     *\r\n     * @param {*} p\r\n     * The parameter to test.\r\n     *\r\n     * @return {Boolean}\r\n     * If the given parameter is Cloneable.\r\n     *\r\n     * @private\r\n     */\r\n    isCloneable(p) {\r\n        return typeof p === \"object\" && typeof p[cloneableSymbols.clone] === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Clones a Cloneable object.\r\n     *\r\n     * @param {Object} cloneable\r\n     * The object to clone.\r\n     *\r\n     * @return {Object}\r\n     * A clone of the object.\r\n     *\r\n     * @private\r\n     */\r\n    cloneCloneable(cloneable) {\r\n        return cloneable[cloneableSymbols.clone](this);\r\n    }\r\n\r\n    /**\r\n     * Clears the context once the cloning is completed.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        if (this.recursionLevel === 0) {\r\n            this.context.clear();\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 5,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Cloner",
    "memberof": "src/Cloner.js",
    "longname": "src/Cloner.js~Cloner",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Cloner.js",
    "importStyle": "Cloner",
    "description": "A class to clone primitive values (type undefined, boolean, number, string,\nsymbol of function) and acyclic or cyclic arrays and objects. There is some\nspecial support for Date and RegExp objects.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "recursionLevel",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#recursionLevel",
    "access": "private",
    "description": "How deep calls to the clone method are nested.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#context",
    "access": "private",
    "description": "A mapping from original objects to their clones.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Map<Object, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#clone",
    "access": null,
    "description": "Tries to clone the given parameter.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "The value to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A clone of the value."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the cloning fails because a type was not supported."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPrimitive",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#isPrimitive",
    "access": "private",
    "description": "Tests if the given parameter is just a primitive value, i. e. it is not\nan object or null.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "The parameter to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given parameter is primitive."
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneDate",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneDate",
    "access": "private",
    "description": "Clones a Date object",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "The Date object to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "A clone of the Date object."
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneRegExp",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneRegExp",
    "access": "private",
    "description": "Clones a RegExp object.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regExp",
        "description": "The RegExp object to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": "A clone of the RegExp object."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneArray",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneArray",
    "access": "private",
    "description": "Clones an array.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A clone of the array."
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneObject",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneObject",
    "access": "private",
    "description": "Clones an object.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A clone of the object."
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneChild",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneChild",
    "access": "private",
    "description": "Clones a value in a container.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "The value to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A clone of the value."
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isCloneable",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#isCloneable",
    "access": "private",
    "description": "Tests if the given parameter implements the Cloneable interface.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "The parameter to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If the given parameter is Cloneable."
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cloneCloneable",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cloneCloneable",
    "access": "private",
    "description": "Clones a Cloneable object.",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cloneable",
        "description": "The object to clone."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A clone of the object."
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cleanup",
    "memberof": "src/Cloner.js~Cloner",
    "longname": "src/Cloner.js~Cloner#cleanup",
    "access": "private",
    "description": "Clears the context once the cloning is completed.",
    "lineNumber": 211,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Color.js",
    "memberof": null,
    "longname": "src/Color.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\r\n * Represents a color.\r\n */\r\nexport default class Color {\r\n\r\n    /**\r\n     * Converts an RGBA color value to a Color object.\r\n     *\r\n     * @param {number} r\r\n     * The red channel. This is an integer in the range [0, 255].\r\n     *\r\n     * @param {number} g\r\n     * The green channel. This is an integer in the range [0, 255].\r\n     *\r\n     * @param {number} b\r\n     * The blue channel. This is an integer in the range [0, 255].\r\n     *\r\n     * @param {number} a\r\n     * The alpha value. This is a number in the range [0, 1]. 0 represents full\r\n     * transparency and 1 is full opacity.\r\n     *\r\n     * @return {Color}\r\n     * The generated Color object.\r\n     */\r\n    static fromRGBA(r, g, b, a = 1) {\r\n        const hex = (r << 8 | g) << 8 | b;\r\n        return new Color(hex, a);\r\n    }\r\n\r\n    /**\r\n     * Converts an HSLA color value to a Color object.\r\n     *\r\n     * @param {number} h\r\n     * The hue. This is a number in the range [0, 360).\r\n     *\r\n     * @param {number} s\r\n     * The saturation. This is a number in the range [0, 1].\r\n     *\r\n     * @param {number} l\r\n     * The lightness. This is a number in the range [0, 1].\r\n     *\r\n     * @param {number} a\r\n     * The alpha value. This is a number in the range [0, 1]. 0 represents full\r\n     * transparency and 1 is full opacity.\r\n     *\r\n     * @return {Color}\r\n     * The generated Color object.\r\n     */\r\n    static fromHSLA(h, s, l, a){\r\n        h /= 360;\r\n\r\n        let r, g, b;\r\n\r\n        if (s === 0) {\r\n            r = g = b = l;\r\n        } else {\r\n            const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n                  m1 = l * 2 - m2;\r\n            r  = Color.hueToRGB(m1, m2, h + 1/3);\r\n            g  = Color.hueToRGB(m1, m2, h      );\r\n            b  = Color.hueToRGB(m1, m2, h - 1/3);\r\n        }\r\n\r\n        r = Math.round(r * 255);\r\n        g = Math.round(g * 255);\r\n        b = Math.round(b * 255);\r\n\r\n        const hex = (r << 8 | g) << 8 | b;\r\n        return new Color(hex, a);\r\n    }\r\n\r\n    /**\r\n     * A helper function for the conversion from HSL to RGB.\r\n     *\r\n     * @private\r\n     */\r\n    static hueToRGB(m1, m2, h) {\r\n        if (h < 0)   h += 1;\r\n        if (h > 1)   h -= 1;\r\n        if (h < 1/6) return m1 + (m2 - m1) * 6 * h;\r\n        if (h < 1/2) return m2;\r\n        if (h < 2/3) return m1 + (m2 - m1) * (2/3 - h) * 6;\r\n        return m1;\r\n    }\r\n\r\n    /**\r\n     * @param {number} hex\r\n     * The hex value.\r\n     *\r\n     * @param  {number} [alpha=1]\r\n     * The alpha value. This is a number in the range [0, 1]. 0 represents full\r\n     * transparency and 1 is full opacity.\r\n     */\r\n    constructor(hex, alpha = 1) {\r\n\r\n        /**\r\n         * The hex value of this color.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.hex = hex;\r\n\r\n        /**\r\n         * The alpha value of this color. This is a number in the range [0, 1].\r\n         * 0 represents full transparency and 1 is full opacity.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.alpha = alpha;\r\n    }\r\n\r\n    /**\r\n     * Converts this Color object to RGBA.\r\n     *\r\n     * @return {Object}\r\n     * An RGBA representation of this color. The resulting object has the three\r\n     * properties r, g and b for the red, green and blue channel respectively.\r\n     * Those are integers in the range [0, 255]. It also has a property for the\r\n     * alpha value. This is a number in the range [0, 1]. 0 represents full\r\n     * transparency and 1 is full opacity.\r\n     */\r\n    toRGBA() {\r\n        const r = this.hex >> 16 & 255,\r\n              g = this.hex >> 8  & 255,\r\n              b = this.hex       & 255;\r\n        return {r, g, b, a: this.alpha};\r\n    }\r\n\r\n    /**\r\n     * Converts this Color object to HSLA.\r\n     *\r\n     * @return {Object}\r\n     * An HSLA representation of this color. The resulting object has the three\r\n     * properties h, s and l for the hue, saturation and lightness respectively.\r\n     * The hue is a number in the range [0, 360) and saturation and lightness\r\n     * are in the range [0, 1]. It also has a property for the alpha value.\r\n     * This is a number in the range [0, 1]. 0 represents full transparency and\r\n     * 1 is full opacity.\r\n     */\r\n    toHSLA() {\r\n        const r   = (this.hex >> 16 & 255) / 255,\r\n              g   = (this.hex >> 8  & 255) / 255,\r\n              b   = (this.hex       & 255) / 255,\r\n              max = Math.max(r, g, b),\r\n              min = Math.min(r, g, b);\r\n\r\n        let h, s, l;\r\n\r\n        l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0;\r\n        } else {\r\n            const d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n            case g: h = (b - r) / d + 2;               break;\r\n            case b: h = (r - g) / d + 4;               break;\r\n            }\r\n            h /= 6;\r\n        }\r\n\r\n        return {h: h * 360, s, l, a: this.alpha};\r\n    }\r\n\r\n    /**\r\n     * Returns a textual representation of this color.\r\n     *\r\n     * @return {string}\r\n     * A textual representation of this color.\r\n     */\r\n    toString() {\r\n        return `#${this.hex.toString(16).padStart(6, \"0\")}`;\r\n    }\r\n}\r\n\r\n/**\r\n * Contains the colors CSS1, CSS2 and CSS3 define.\r\n *\r\n * @type {Object}\r\n */\r\nexport const predefinedColors = {\r\n    black:                new Color(0x000000),\r\n    silver:               new Color(0xc0c0c0),\r\n    gray:                 new Color(0x808080),\r\n    white:                new Color(0xffffff),\r\n    maroon:               new Color(0x800000),\r\n    red:                  new Color(0xff0000),\r\n    purple:               new Color(0x800080),\r\n    fuchsia:              new Color(0xff00ff),\r\n    green:                new Color(0x008000),\r\n    lime:                 new Color(0x00ff00),\r\n    olive:                new Color(0x808000),\r\n    yellow:               new Color(0xffff00),\r\n    navy:                 new Color(0x000080),\r\n    blue:                 new Color(0x0000ff),\r\n    teal:                 new Color(0x008080),\r\n    aqua:                 new Color(0x00ffff),\r\n    orange:               new Color(0xffa500),\r\n    aliceblue:            new Color(0xf0f8ff),\r\n    antiquewhite:         new Color(0xfaebd7),\r\n    aquamarine:           new Color(0x7fffd4),\r\n    azure:                new Color(0xf0ffff),\r\n    beige:                new Color(0xf5f5dc),\r\n    bisque:               new Color(0xffe4c4),\r\n    blanchedalmond:       new Color(0xffe4c4),\r\n    blueviolet:           new Color(0x8a2be2),\r\n    brown:                new Color(0xa52a2a),\r\n    burlywood:            new Color(0xdeb887),\r\n    cadetblue:            new Color(0x5f9ea0),\r\n    chartreuse:           new Color(0x7fff00),\r\n    chocolate:            new Color(0xd2691e),\r\n    coral:                new Color(0xff7f50),\r\n    cornflowerblue:       new Color(0x6495ed),\r\n    cornsilk:             new Color(0xfff8dc),\r\n    crimson:              new Color(0xdc143c),\r\n    darkblue:             new Color(0x00008b),\r\n    darkcyan:             new Color(0x008b8b),\r\n    darkgoldenrod:        new Color(0xb8860b),\r\n    darkgray:             new Color(0xa9a9a9),\r\n    darkgreen:            new Color(0x006400),\r\n    darkgrey:             new Color(0xa9a9a9),\r\n    darkkhaki:            new Color(0xbdb76b),\r\n    darkmagenta:          new Color(0x8b008b),\r\n    darkolivegreen:       new Color(0x556b2f),\r\n    darkorange:           new Color(0xff8c00),\r\n    darkorchid:           new Color(0x9932cc),\r\n    darkred:              new Color(0x8b0000),\r\n    darksalmon:           new Color(0xe9967a),\r\n    darkseagreen:         new Color(0x8fbc8f),\r\n    darkslateblue:        new Color(0x483d8b),\r\n    darkslategray:        new Color(0x2f4f4f),\r\n    darkslategrey:        new Color(0x2f4f4f),\r\n    darkturquoise:        new Color(0x00ced1),\r\n    darkviolet:           new Color(0x9400d3),\r\n    deeppink:             new Color(0xff1493),\r\n    deepskyblue:          new Color(0x00bfff),\r\n    dimgray:              new Color(0x696969),\r\n    dimgrey:              new Color(0x696969),\r\n    dodgerblue:           new Color(0x1e90ff),\r\n    firebrick:            new Color(0xb22222),\r\n    floralwhite:          new Color(0xfffaf0),\r\n    forestgreen:          new Color(0x228b22),\r\n    gainsboro:            new Color(0xdcdcdc),\r\n    ghostwhite:           new Color(0xf8f8ff),\r\n    gold:                 new Color(0xffd700),\r\n    goldenrod:            new Color(0xdaa520),\r\n    greenyellow:          new Color(0xadff2f),\r\n    grey:                 new Color(0x808080),\r\n    honeydew:             new Color(0xf0fff0),\r\n    hotpink:              new Color(0xff69b4),\r\n    indianred:            new Color(0xcd5c5c),\r\n    indigo:               new Color(0x4b0082),\r\n    ivory:                new Color(0xfffff0),\r\n    khaki:                new Color(0xf0e68c),\r\n    lavender:             new Color(0xe6e6fa),\r\n    lavenderblush:        new Color(0xfff0f5),\r\n    lawngreen:            new Color(0x7cfc00),\r\n    lemonchiffon:         new Color(0xfffacd),\r\n    lightblue:            new Color(0xadd8e6),\r\n    lightcoral:           new Color(0xf08080),\r\n    lightcyan:            new Color(0xe0ffff),\r\n    lightgoldenrodyellow: new Color(0xfafad2),\r\n    lightgray:            new Color(0xd3d3d3),\r\n    lightgreen:           new Color(0x90ee90),\r\n    lightgrey:            new Color(0xd3d3d3),\r\n    lightpink:            new Color(0xffb6c1),\r\n    lightsalmon:          new Color(0xffa07a),\r\n    lightseagreen:        new Color(0x20b2aa),\r\n    lightskyblue:         new Color(0x87cefa),\r\n    lightslategray:       new Color(0x778899),\r\n    lightslategrey:       new Color(0x778899),\r\n    lightsteelblue:       new Color(0xb0c4de),\r\n    lightyellow:          new Color(0xffffe0),\r\n    limegreen:            new Color(0x32cd32),\r\n    linen:                new Color(0xfaf0e6),\r\n    mediumaquamarine:     new Color(0x66cdaa),\r\n    mediumblue:           new Color(0x0000cd),\r\n    mediumorchid:         new Color(0xba55d3),\r\n    mediumpurple:         new Color(0x9370db),\r\n    mediumseagreen:       new Color(0x3cb371),\r\n    mediumslateblue:      new Color(0x7b68ee),\r\n    mediumspringgreen:    new Color(0x00fa9a),\r\n    mediumturquoise:      new Color(0x48d1cc),\r\n    mediumvioletred:      new Color(0xc71585),\r\n    midnightblue:         new Color(0x191970),\r\n    mintcream:            new Color(0xf5fffa),\r\n    mistyrose:            new Color(0xffe4e1),\r\n    moccasin:             new Color(0xffe4b5),\r\n    navajowhite:          new Color(0xffdead),\r\n    oldlace:              new Color(0xfdf5e6),\r\n    olivedrab:            new Color(0x6b8e23),\r\n    orangered:            new Color(0xff4500),\r\n    orchid:               new Color(0xda70d6),\r\n    palegoldenrod:        new Color(0xeee8aa),\r\n    palegreen:            new Color(0x98fb98),\r\n    paleturquoise:        new Color(0xafeeee),\r\n    palevioletred:        new Color(0xdb7093),\r\n    papayawhip:           new Color(0xffefd5),\r\n    peachpuff:            new Color(0xffdab9),\r\n    peru:                 new Color(0xcd853f),\r\n    pink:                 new Color(0xffc0cb),\r\n    plum:                 new Color(0xdda0dd),\r\n    powderblue:           new Color(0xb0e0e6),\r\n    rosybrown:            new Color(0xbc8f8f),\r\n    royalblue:            new Color(0x4169e1),\r\n    saddlebrown:          new Color(0x8b4513),\r\n    salmon:               new Color(0xfa8072),\r\n    sandybrown:           new Color(0xf4a460),\r\n    seagreen:             new Color(0x2e8b57),\r\n    seashell:             new Color(0xfff5ee),\r\n    sienna:               new Color(0xa0522d),\r\n    skyblue:              new Color(0x87ceeb),\r\n    slateblue:            new Color(0x6a5acd),\r\n    slategray:            new Color(0x708090),\r\n    slategrey:            new Color(0x708090),\r\n    snow:                 new Color(0xfffafa),\r\n    springgreen:          new Color(0x00ff7f),\r\n    steelblue:            new Color(0x4682b4),\r\n    tan:                  new Color(0xd2b48c),\r\n    thistle:              new Color(0xd8bfd8),\r\n    tomato:               new Color(0xff6347),\r\n    turquoise:            new Color(0x40e0d0),\r\n    violet:               new Color(0xee82ee),\r\n    wheat:                new Color(0xf5deb3),\r\n    whitesmoke:           new Color(0xf5f5f5),\r\n    yellowgreen:          new Color(0x9acd32),\r\n    rebeccapurple:        new Color(0x663399),\r\n    transparent:          new Color(0x000000, 0)\r\n};\r\n"
  },
  {
    "__docId__": 20,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Color",
    "memberof": "src/Color.js",
    "longname": "src/Color.js~Color",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Color.js",
    "importStyle": "Color",
    "description": "Represents a color.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromRGBA",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color.fromRGBA",
    "access": null,
    "description": "Converts an RGBA color value to a Color object.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The red channel. This is an integer in the range [0, 255]."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "The green channel. This is an integer in the range [0, 255]."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The blue channel. This is an integer in the range [0, 255]."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The alpha value. This is a number in the range [0, 1]. 0 represents full\ntransparency and 1 is full opacity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "The generated Color object."
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromHSLA",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color.fromHSLA",
    "access": null,
    "description": "Converts an HSLA color value to a Color object.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "The hue. This is a number in the range [0, 360)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The saturation. This is a number in the range [0, 1]."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "l",
        "description": "The lightness. This is a number in the range [0, 1]."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The alpha value. This is a number in the range [0, 1]. 0 represents full\ntransparency and 1 is full opacity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "The generated Color object."
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "hueToRGB",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color.hueToRGB",
    "access": "private",
    "description": "A helper function for the conversion from HSL to RGB.",
    "lineNumber": 77,
    "params": [
      {
        "name": "m1",
        "types": [
          "*"
        ]
      },
      {
        "name": "m2",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#constructor",
    "access": null,
    "description": "",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "The hex value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "alpha",
        "description": "The alpha value. This is a number in the range [0, 1]. 0 represents full\ntransparency and 1 is full opacity."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hex",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#hex",
    "access": null,
    "description": "The hex value of this color.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "alpha",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#alpha",
    "access": null,
    "description": "The alpha value of this color. This is a number in the range [0, 1].\n0 represents full transparency and 1 is full opacity.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toRGBA",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#toRGBA",
    "access": null,
    "description": "Converts this Color object to RGBA.",
    "lineNumber": 122,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An RGBA representation of this color. The resulting object has the three\nproperties r, g and b for the red, green and blue channel respectively.\nThose are integers in the range [0, 255]. It also has a property for the\nalpha value. This is a number in the range [0, 1]. 0 represents full\ntransparency and 1 is full opacity."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toHSLA",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#toHSLA",
    "access": null,
    "description": "Converts this Color object to HSLA.",
    "lineNumber": 140,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An HSLA representation of this color. The resulting object has the three\nproperties h, s and l for the hue, saturation and lightness respectively.\nThe hue is a number in the range [0, 360) and saturation and lightness\nare in the range [0, 1]. It also has a property for the alpha value.\nThis is a number in the range [0, 1]. 0 represents full transparency and\n1 is full opacity."
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Color.js~Color",
    "longname": "src/Color.js~Color#toString",
    "access": null,
    "description": "Returns a textual representation of this color.",
    "lineNumber": 173,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A textual representation of this color."
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "predefinedColors",
    "memberof": "src/Color.js",
    "longname": "src/Color.js~predefinedColors",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Color.js",
    "importStyle": "{predefinedColors}",
    "description": "Contains the colors CSS1, CSS2 and CSS3 define.",
    "lineNumber": 183,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 31,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Event.js",
    "memberof": null,
    "longname": "src/Event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\r\n * An event that can be fired and then catched by listeners.\r\n */\r\nexport default class Event {\r\n\r\n    /**\r\n     * @param {Object} p\r\n     * The parameter object.\r\n     *\r\n     * @param {Object} [p.source]\r\n     * The object firing this event.\r\n     *\r\n     * @param {String} [p.type]\r\n     * The type of this event.\r\n     *\r\n     * @param {*} [p.data]\r\n     * Any additional data to associate with this event.\r\n     */\r\n    constructor({source, type, data} = {}) {\r\n\r\n        /**\r\n         * The object firing this event.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.source = source;\r\n\r\n        /**\r\n         * The type of this event.\r\n         *\r\n         * @type {String}\r\n         */\r\n        this.type = type;\r\n\r\n        /**\r\n         * Any additional data to associate with this event.\r\n         *\r\n         * @type {*}\r\n         */\r\n        this.data = data;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 32,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Event",
    "memberof": "src/Event.js",
    "longname": "src/Event.js~Event",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Event.js",
    "importStyle": "Event",
    "description": "An event that can be fired and then catched by listeners.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 33,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Event.js~Event",
    "longname": "src/Event.js~Event#constructor",
    "access": null,
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "The parameter object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "p.source",
        "description": "The object firing this event."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "p.type",
        "description": "The type of this event."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "p.data",
        "description": "Any additional data to associate with this event."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "source",
    "memberof": "src/Event.js~Event",
    "longname": "src/Event.js~Event#source",
    "access": null,
    "description": "The object firing this event.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/Event.js~Event",
    "longname": "src/Event.js~Event#type",
    "access": null,
    "description": "The type of this event.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/Event.js~Event",
    "longname": "src/Event.js~Event#data",
    "access": null,
    "description": "Any additional data to associate with this event.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/EventManager.js",
    "memberof": null,
    "longname": "src/EventManager.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Event               from \"./Event.js\";\r\nimport {observableSymbols} from \"./Observable.js\";\r\n\r\n/**\r\n * A helper class that can manage events and event listeners for other objects.\r\n * If you want to hide that you are using this class, you can use the provided\r\n * {@link observableMixin}.\r\n *\r\n * @implements {Observable}\r\n */\r\nexport default class EventManager {\r\n\r\n    /**\r\n     * A factory method for {@link Event} objects.\r\n     *\r\n     * @param {Object} p\r\n     * The parameter object.\r\n     *\r\n     * @param {Object} [p.source]\r\n     * The object firing this event.\r\n     *\r\n     * @param {String} [p.type]\r\n     * The type of this event.\r\n     *\r\n     * @param {*} [p.data]\r\n     * Any additional data to associate with this event.\r\n     *\r\n     * @return {Event}\r\n     * The new Event object.\r\n     */\r\n    static makeEvent({source, type, data} = {}) {\r\n        return new Event({source, type, data});\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Maps from an event type to its listeners.\r\n         *\r\n         * @type {Map<String, Set<Function>>}\r\n         */\r\n        this.typeToListeners = new Map();\r\n\r\n        /**\r\n         * Maps from a listener to the types of events it listens to.\r\n         *\r\n         * @type {Map<Function, Set<String>}\r\n         */\r\n        this.listenerToTypes = new Map();\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener to this event manager.\r\n     *\r\n     * @param {Function} f\r\n     * The function that should be executed when the event fires.\r\n     *\r\n     * @param {String|Iterator<String>} [types]\r\n     * The types of events the function should listen to. If this parameter is\r\n     * not specified it will only listen to events without a type.\r\n     *\r\n     * @return {EventManager}\r\n     * This event manager to make the method chainable.\r\n     */\r\n    [observableSymbols.addListener](f, types = []) {\r\n        if (typeof types === \"string\") {\r\n            types = [types];\r\n        }\r\n\r\n        if (!this.listenerToTypes.has(f)) {\r\n            this.listenerToTypes.set(f, new Set());\r\n        }\r\n        for (let type of types) {\r\n            if (!this.typeToListeners.has(type)) {\r\n                this.typeToListeners.set(type, new Set());\r\n            }\r\n            this.typeToListeners.get(type).add(f);\r\n            this.listenerToTypes.get(f).add(type);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes an event listener from this event manager.\r\n     *\r\n     * @param {Function} f\r\n     * The listener that should be removed.\r\n     *\r\n     * @param {String|Iterator<String>} [types]\r\n     * The types of events the function should no longer listen to. If this\r\n     * parameter is left empty the listener is removed completely.\r\n     *\r\n     * @return {EventManager}\r\n     * This event manager to make the method chainable.\r\n     */\r\n    [observableSymbols.removeListener](f, types = this.listenerToTypes.get(f)) {\r\n        if (types === undefined) {\r\n            return this;\r\n        } else if (typeof types === \"string\") {\r\n            types = [types];\r\n        }\r\n\r\n        for (let type of types) {\r\n            if (!this.typeToListeners.has(type)) {\r\n                continue;\r\n            }\r\n\r\n            this.typeToListeners.get(type).delete(f);\r\n            if (this.typeToListeners.get(type).size === 0) {\r\n                this.typeToListeners.delete(type);\r\n            }\r\n            this.listenerToTypes.get(f).delete(type);\r\n        }\r\n\r\n        if (this.listenerToTypes.get(f).size === 0) {\r\n            this.listenerToTypes.delete(f);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Notifies all listeners that are interested in the given event.\r\n     *\r\n     * @param {Event} e\r\n     * The event to fire.\r\n     *\r\n     * @return {EventManager}\r\n     * This event manager to make the method chainable.\r\n     */\r\n    [observableSymbols.fireEvent](e) {\r\n        let listeners;\r\n        if (e.type) {\r\n            listeners = this.typeToListeners.get(e.type) || [];\r\n        } else {\r\n            listeners = this.listenerToTypes.keys();\r\n        }\r\n        for (let f of listeners) {\r\n            f(e);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 38,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EventManager",
    "memberof": "src/EventManager.js",
    "longname": "src/EventManager.js~EventManager",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/EventManager.js",
    "importStyle": "EventManager",
    "description": "A helper class that can manage events and event listeners for other objects.\nIf you want to hide that you are using this class, you can use the provided\n{@link observableMixin}.",
    "lineNumber": 11,
    "interface": false,
    "implements": [
      "Observable"
    ]
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "makeEvent",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager.makeEvent",
    "access": null,
    "description": "A factory method for {@link Event} objects.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "The parameter object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "p.source",
        "description": "The object firing this event."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "p.type",
        "description": "The type of this event."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "p.data",
        "description": "Any additional data to associate with this event."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Event"
      ],
      "spread": false,
      "description": "The new Event object."
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#constructor",
    "access": null,
    "description": "",
    "lineNumber": 38,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "typeToListeners",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#typeToListeners",
    "access": null,
    "description": "Maps from an event type to its listeners.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Map<String, Set<Function>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "listenerToTypes",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#listenerToTypes",
    "access": null,
    "description": "Maps from a listener to the types of events it listens to.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Map<Function, Set<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[observableSymbols.addListener]",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#[observableSymbols.addListener]",
    "access": null,
    "description": "Adds an event listener to this event manager.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function that should be executed when the event fires."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "types",
        "description": "The types of events the function should listen to. If this parameter is\nnot specified it will only listen to events without a type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": "This event manager to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[observableSymbols.removeListener]",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#[observableSymbols.removeListener]",
    "access": null,
    "description": "Removes an event listener from this event manager.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The listener that should be removed."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Iterator<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "types",
        "description": "The types of events the function should no longer listen to. If this\nparameter is left empty the listener is removed completely."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": "This event manager to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[observableSymbols.fireEvent]",
    "memberof": "src/EventManager.js~EventManager",
    "longname": "src/EventManager.js~EventManager#[observableSymbols.fireEvent]",
    "access": null,
    "description": "Notifies all listeners that are interested in the given event.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "The event to fire."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": "This event manager to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Extensible.js",
    "memberof": null,
    "longname": "src/Extensible.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\r\n * Contains symbols for the methods of the Extensible interface.\r\n *\r\n * @type {Object}\r\n */\r\nexport const extensibleSymbols = {\r\n    addMethod:    Symbol(\"addMethod\"),\r\n    removeMethod: Symbol(\"removeMethod\"),\r\n    addPlugin:    Symbol(\"addPlugin\"),\r\n    removePlugin: Symbol(\"removePlugin\")\r\n};\r\n\r\n/**\r\n * A mixin for Extensible behavior.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, extensibleMixin);\r\n * let myObject = new MyClass(),\r\n * myObject[extensibleSymbols.addMethod](\"toString\", () => \"Hi\");\r\n */\r\nexport const extensibleMixin = {\r\n    [extensibleSymbols.addMethod](name, f, override = false) {\r\n        if (!override && this.hasOwnProperty(name)) {\r\n            throw new Error(`A property ${name} exists already on ${this}.`);\r\n        }\r\n        this[name] = f;\r\n        return this;\r\n    },\r\n\r\n    [extensibleSymbols.removeMethod](name) {\r\n        if (!this[name]) {\r\n            throw new Error(`A property ${name} does not exist on ${this}.`);\r\n        }\r\n        delete this[name];\r\n        return this;\r\n    },\r\n\r\n    [extensibleSymbols.addPlugin](plugin) {\r\n        plugin.register(this);\r\n        return this;\r\n    },\r\n\r\n    [extensibleSymbols.removePlugin](plugin) {\r\n        plugin.unregister(this);\r\n        return this;\r\n    }\r\n};\r\n\r\n/**\r\n * In addition to everything {@link extensibleMixin} offers this mixin also\r\n * provides an easier to use interface. It adds methods with names that\r\n * correspond to the keys in {@link extensibleSymbols}.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, extensibleMixin);\r\n * let myObject = new MyClass(),\r\n * myObject.addMethod(\"toString\", () => \"Hi\");\r\n */\r\nexport const extensibleExtendedMixin = Object.assign({\r\n    addMethod:    extensibleMixin[extensibleSymbols.addMethod],\r\n    removeMethod: extensibleMixin[extensibleSymbols.removeMethod],\r\n    addPlugin:    extensibleMixin[extensibleSymbols.addPlugin],\r\n    removePlugin: extensibleMixin[extensibleSymbols.removePlugin]\r\n}, extensibleMixin);\r\n// for (let [k, v] of Object.entries(extensibleSymbols)) {\r\n//     extensibleExtendedMixin[k] = extensibleMixin[v];\r\n// }\r\n\r\n\r\n// /**\r\n//  * An interface for every object that can be extended by plugins.\r\n//  *\r\n//  * @interface\r\n//  */\r\n// class Extensible {\r\n\r\n//     /**\r\n//      * Adds the given method to this object.\r\n//      *\r\n//      * @param {String|Symbol} name\r\n//      * The name of the method.\r\n//      *\r\n//      * @param {Function} f\r\n//      * The function to execute.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [extensibleSymbols.addMethod](name, f) {}\r\n\r\n//     /**\r\n//      * Removes the method with the given name from this object.\r\n//      *\r\n//      * @param {String|Symbol} name\r\n//      * The name of the function to remove.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [extensibleSymbols.removeMethod](name) {}\r\n\r\n//     /**\r\n//      * Adds the given plugins to this object by calling the register method on\r\n//      * each plugin and passing this object as an argument.\r\n//      *\r\n//      * @param {Plugin} plugins\r\n//      * The plugins to add.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [extensibleSymbols.addPlugin](plugin) {}\r\n\r\n//     /**\r\n//      * Removes the given plugins from this object by calling the unregister method\r\n//      * on each plugin and passing this object as an argument.\r\n//      *\r\n//      * @param {Plugin} plugins\r\n//      * The plugins to remove.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [extensibleSymbols.removePlugin](plugin) {}\r\n// }"
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "extensibleSymbols",
    "memberof": "src/Extensible.js",
    "longname": "src/Extensible.js~extensibleSymbols",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Extensible.js",
    "importStyle": "{extensibleSymbols}",
    "description": "Contains symbols for the methods of the Extensible interface.",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "extensibleMixin",
    "memberof": "src/Extensible.js",
    "longname": "src/Extensible.js~extensibleMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Extensible.js",
    "importStyle": "{extensibleMixin}",
    "description": "A mixin for Extensible behavior.",
    "examples": [
      "Object.assign(MyClass.prototype, extensibleMixin);\nlet myObject = new MyClass(),\nmyObject[extensibleSymbols.addMethod](\"toString\", () => \"Hi\");"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "extensibleExtendedMixin",
    "memberof": "src/Extensible.js",
    "longname": "src/Extensible.js~extensibleExtendedMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Extensible.js",
    "importStyle": "{extensibleExtendedMixin}",
    "description": "In addition to everything {@link extensibleMixin} offers this mixin also\nprovides an easier to use interface. It adds methods with names that\ncorrespond to the keys in {@link extensibleSymbols}.",
    "examples": [
      "Object.assign(MyClass.prototype, extensibleMixin);\nlet myObject = new MyClass(),\nmyObject.addMethod(\"toString\", () => \"Hi\");"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/IDGenerator.js",
    "memberof": null,
    "longname": "src/IDGenerator.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\r\n * A class to generate IDs.\r\n */\r\nexport default class IDGenerator {\r\n\r\n    /**\r\n     * @param {string} [prefix=\"\"]\r\n     * The prefix IDs should use.\r\n     */\r\n    constructor(prefix = \"\") {\r\n\r\n        /**\r\n         * The prefix IDs should use.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.prefix = prefix;\r\n\r\n        /**\r\n         * An automatically incremented counter used to generate IDs.\r\n         *\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this.counter = 0;\r\n    }\r\n\r\n    /**\r\n     * Returns an ID.\r\n     *\r\n     * @return {string}\r\n     * An ID.\r\n     */\r\n    next() {\r\n        return this.prefix + (this.counter++);\r\n    }\r\n\r\n    /**\r\n     * Ensures that the given ID is not going to be generated.\r\n     *\r\n     * @param {string} id\r\n     * The ID to avoid.\r\n     */\r\n    avoid(id) {\r\n        const regex = new RegExp(`^${this.prefix}([0-9]+)$`);\r\n        if (id && regex.test(id)) {\r\n            const [, counter] = regex.exec(id);\r\n            this.counter = Math.max(this.counter, counter + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the counter to the maximum of the given value and its current value.\r\n     * This method is going to be removed in favor of the avoid method.\r\n     *\r\n     * @param {number} n\r\n     * The new minimal value of the counter.\r\n     *\r\n     * @deprecated\r\n     */\r\n    increaseToAtLeast(n) {\r\n        this.counter = Math.max(this.counter, n);\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "IDGenerator",
    "memberof": "src/IDGenerator.js",
    "longname": "src/IDGenerator.js~IDGenerator",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/IDGenerator.js",
    "importStyle": "IDGenerator",
    "description": "A class to generate IDs.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#constructor",
    "access": null,
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "prefix",
        "description": "The prefix IDs should use."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prefix",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#prefix",
    "access": null,
    "description": "The prefix IDs should use.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "counter",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#counter",
    "access": "private",
    "description": "An automatically incremented counter used to generate IDs.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#next",
    "access": null,
    "description": "Returns an ID.",
    "lineNumber": 34,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An ID."
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "avoid",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#avoid",
    "access": null,
    "description": "Ensures that the given ID is not going to be generated.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID to avoid."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "counter",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#counter",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "increaseToAtLeast",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#increaseToAtLeast",
    "access": null,
    "description": "Sets the counter to the maximum of the given value and its current value.\nThis method is going to be removed in favor of the avoid method.",
    "lineNumber": 61,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The new minimal value of the counter."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "counter",
    "memberof": "src/IDGenerator.js~IDGenerator",
    "longname": "src/IDGenerator.js~IDGenerator#counter",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Observable.js",
    "memberof": null,
    "longname": "src/Observable.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\r\n * Contains symbols for the methods of the Observable interface.\r\n *\r\n * @type {Object}\r\n */\r\nexport const observableSymbols = {\r\n    addListener:    Symbol(\"addListener\"),\r\n    removeListener: Symbol(\"removeListener\"),\r\n    fireEvent:      Symbol(\"fireEvent\")\r\n};\r\n\r\n/**\r\n * This is a mixin for Observable behavior if an {@link EventManager} is used.\r\n * The event manager must be reachable by this.eventManager. This mixin can be\r\n * used to facade the use of an EventManager.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, observableMixin);\r\n * let myObject = new MyClass(),\r\n * myObject[observableSymbols.addListener](() => console.log(\"Called\"), \"update\");\r\n */\r\nexport const observableMixin = {\r\n    [observableSymbols.addListener](f, types) {\r\n        this.eventManager[observableSymbols.addListener](f, types);\r\n        return this;\r\n    },\r\n\r\n    [observableSymbols.removeListener](f, types) {\r\n        this.eventManager[observableSymbols.removeListener](f, types);\r\n        return this;\r\n    },\r\n\r\n    [observableSymbols.fireEvent](e) {\r\n        this.eventManager[observableSymbols.fireEvent](e);\r\n        return this;\r\n    }\r\n};\r\n\r\n/**\r\n * In addition to everything {@link observableMixin} offers this mixin also\r\n * provides an easier to use interface. It adds methods with names that\r\n * correspond to the keys in {@link observableSymbols}.\r\n *\r\n * @type {Object}\r\n *\r\n * @example\r\n * Object.assign(MyClass.prototype, observableExtendedMixin);\r\n * let myObject = new MyClass(),\r\n * myObject.addListener(() => console.log(\"Called\"), \"update\");\r\n */\r\nexport const observableExtendedMixin = Object.assign({\r\n    addListener:    observableMixin[observableSymbols.addListener],\r\n    removeListener: observableMixin[observableSymbols.removeListener],\r\n    fireEvent:      observableMixin[observableSymbols.fireEvent]\r\n}, observableMixin);\r\n\r\n// /**\r\n//  * An interface for every object that allows listeners to be attached to it.\r\n//  *\r\n//  * @interface\r\n//  */\r\n// class Observable {\r\n//\r\n//     /**\r\n//      * Adds an event listener to this object.\r\n//      *\r\n//      * @param {Function} f\r\n//      * The function that should be executed when the event fires.\r\n//      *\r\n//      * @param {String|Iterator<String>} [types]\r\n//      * The types of events the function should listen to.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [observableSymbols.addListener](f, types) {}\r\n//\r\n//     /**\r\n//      * Removes an event listener from this object.\r\n//      *\r\n//      * @param {Function} f\r\n//      * The listener that should be removed.\r\n//      *\r\n//      * @param {String|Iterator<String>} [types]\r\n//      * The types of events the function should no longer listen to.\r\n//      *\r\n//      * @abstract\r\n//      */\r\n//     [observableSymbols.removeListener](f, types) {}\r\n//\r\n//     /**\r\n//      * Notifies all listeners that are interested in the given event.\r\n//      *\r\n//      * @param {Event} e\r\n//      * The event to fire.\r\n//      */\r\n//     [observableSymbols.fireEvent](e) {}\r\n// }\r\n"
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "observableSymbols",
    "memberof": "src/Observable.js",
    "longname": "src/Observable.js~observableSymbols",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Observable.js",
    "importStyle": "{observableSymbols}",
    "description": "Contains symbols for the methods of the Observable interface.",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "observableMixin",
    "memberof": "src/Observable.js",
    "longname": "src/Observable.js~observableMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Observable.js",
    "importStyle": "{observableMixin}",
    "description": "This is a mixin for Observable behavior if an {@link EventManager} is used.\nThe event manager must be reachable by this.eventManager. This mixin can be\nused to facade the use of an EventManager.",
    "examples": [
      "Object.assign(MyClass.prototype, observableMixin);\nlet myObject = new MyClass(),\nmyObject[observableSymbols.addListener](() => console.log(\"Called\"), \"update\");"
    ],
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "observableExtendedMixin",
    "memberof": "src/Observable.js",
    "longname": "src/Observable.js~observableExtendedMixin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Observable.js",
    "importStyle": "{observableExtendedMixin}",
    "description": "In addition to everything {@link observableMixin} offers this mixin also\nprovides an easier to use interface. It adds methods with names that\ncorrespond to the keys in {@link observableSymbols}.",
    "examples": [
      "Object.assign(MyClass.prototype, observableExtendedMixin);\nlet myObject = new MyClass(),\nmyObject.addListener(() => console.log(\"Called\"), \"update\");"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Plugin.js",
    "memberof": null,
    "longname": "src/Plugin.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {cloneableSymbols} from \"./Cloneable.js\";\r\n\r\n/**\r\n * A base class for plugins.\r\n *\r\n * @implements {Cloneable}\r\n */\r\nexport default class Plugin {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Adds this plugin to the given object.\r\n     *\r\n     * @param {Object} o\r\n     * The object this plugin should be added to.\r\n     *\r\n     * @abstract\r\n     */\r\n    register(o) {}\r\n\r\n    /**\r\n     * Removes this plugin from the given object.\r\n     *\r\n     * @param {Object} o\r\n     * The object this plugin should be removed from.\r\n     *\r\n     * @abstract\r\n     */\r\n    unregister(o) {}\r\n\r\n    /**\r\n     * Returns a copy of this plugin. For indexes you usually do not want to\r\n     * copy its internal data structures but just the configuration so it can be\r\n     * added to a new object. By default this method returns this plugin.\r\n     *\r\n     * @return {Plugin}\r\n     * This object.\r\n     */\r\n    [cloneableSymbols.clone]() {\r\n        return this;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 65,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Plugin",
    "memberof": "src/Plugin.js",
    "longname": "src/Plugin.js~Plugin",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/Plugin.js",
    "importStyle": "Plugin",
    "description": "A base class for plugins.",
    "lineNumber": 8,
    "interface": false,
    "implements": [
      "Cloneable"
    ]
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Plugin.js~Plugin",
    "longname": "src/Plugin.js~Plugin#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "src/Plugin.js~Plugin",
    "longname": "src/Plugin.js~Plugin#register",
    "access": null,
    "description": "Adds this plugin to the given object.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "The object this plugin should be added to."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregister",
    "memberof": "src/Plugin.js~Plugin",
    "longname": "src/Plugin.js~Plugin#unregister",
    "access": null,
    "description": "Removes this plugin from the given object.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "The object this plugin should be removed from."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[cloneableSymbols.clone]",
    "memberof": "src/Plugin.js~Plugin",
    "longname": "src/Plugin.js~Plugin#[cloneableSymbols.clone]",
    "access": null,
    "description": "Returns a copy of this plugin. For indexes you usually do not want to\ncopy its internal data structures but just the configuration so it can be\nadded to a new object. By default this method returns this plugin.",
    "lineNumber": 43,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Plugin"
      ],
      "spread": false,
      "description": "This object."
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gump/GumpMap.js",
    "memberof": null,
    "longname": "src/gump/GumpMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash/fp\";\n\nimport EventManager              from \"../EventManager.js\";\nimport {observableExtendedMixin} from \"../Observable.js\";\n\nimport GumpPath from \"./GumpPath.js\";\nimport GumpSet  from \"./GumpSet.js\";\n\n/**\n * Signalizes that a parameter was not supplied.\n *\n * @ignore\n */\nconst EMPTY = Symbol(\"default\");\n\n/**\n * A data structure consisting of nested maps and sets. It provides easy access\n * to nested properties and monitors its children for any changes.\n */\nexport default class GumpMap {\n\n    /**\n     * Converts the given object to a GumpMap. Nested objects are also\n     * transformed into GumpMaps and nested arrays become GumpSets.\n     *\n     * @param {Object} o\n     * The object to convert.\n     *\n     * @return {GumpMap}\n     * The converted object.\n     */\n    static fromObject(o) {\n        const result = new GumpMap({ autoPurgeEmptyContainers: this.autoPurgeEmptyContainers });\n\n        for (let [k, v] of Object.entries(o)) {\n            if (_.isArray(v)) {\n                result.add(k, new GumpSet(v));\n            } else if (_.isPlainObject(v)) {\n                result.add(k, GumpMap.fromObject(v));\n            } else {\n                result.add(k, v);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @param {Object} obj\n     * The configuration object.\n     *\n     * @param {Iterable} [obj.initialValues=[]]\n     * An iterable object containing the initial values of this map. Each entry\n     * in this array is expected to match [path, value], where path is the place\n     * where the value should be added.\n     *\n     * @param {Boolean} [obj.autPurgeEmptyContainers=false]\n     * Whether a container should be deleted when it becomes empty after one of\n     * its entries was deleted.\n     */\n    constructor({ initialValues = [], autoPurgeEmptyContainers = false } = {}) {\n\n        /**\n         * Stores the size of this map.\n         *\n         * @type {Number}\n         */\n        this.size = 0;\n\n        /**\n         * Whether a container should be deleted when it becomes empty after one of\n         * its entries was deleted.\n         *\n         * @type {Boolean}\n         * @private\n         */\n        this.autoPurgeEmptyContainers = autoPurgeEmptyContainers;\n\n        /**\n         * Stores the values of this map.\n         *\n         * @type {Map}\n         * @private\n         */\n        this.children = new Map();\n\n        /**\n         * Maps from a direct child to the key used to access it.\n         *\n         * @type {Map}\n         * @private\n         */\n        this.childToKey = new Map();\n\n        /**\n         * Handles listeners.\n         *\n         * @type {EventManager}\n         * @private\n         */\n        this.eventManager = new EventManager();\n\n        /**\n         * Bubbles an add event.\n         *\n         * @type {Function}\n         * @private\n         */\n        this.bubbleAddEvent = (e) => {\n            const value = e.data.value;\n\n            if (value instanceof GumpMap || value instanceof GumpSet) {\n                this.size += value.size;\n            } else {\n                this.size++;\n            }\n\n            this.bubbleEvent(e, { value });\n        };\n\n        /**\n         * Bubbles a clear event.\n         *\n         * @type {Function}\n         * @private\n         */\n        this.bubbleClearEvent = (e) => {\n            const deleted = e.data.deleted;\n            this.size -= deleted.length;\n            this.bubbleEvent(e, { deleted });\n        };\n\n        /**\n         * Bubbles a delete event.\n         *\n         * @type {Function}\n         * @private\n         */\n        this.bubbleDeleteEvent = (e) => {\n            const value   = e.data.value;\n            const deleted = e.data.deleted;\n            this.size -= deleted.length;\n            this.bubbleEvent(e, { value, deleted });\n\n            if (this.autoPurgeEmptyContainers && e.source.size === 0) {\n                const key = this.childToKey.get(e.source);\n                this.delete(key);\n            }\n        };\n\n        // Add initial values\n        for (let [path, value] of initialValues) {\n            this.add(path, value);\n        }\n    }\n\n    /**\n     * Adds the given value to this map under the given path.\n     *\n     * @param {*} path\n     * Where the value should be added. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} value\n     * The value to add.\n     */\n    add(path, value) {\n        path = GumpPath.toGumpPath(path);\n\n        if (!path.isEmpty()) {\n            const key           = path.head();\n            const remainingPath = path.tail();\n\n            if (remainingPath.isEmpty()) {\n                this.addHere(key, value);\n            } else {\n                this.addDeeper(key, remainingPath, value);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a value directly under this map using the given key.\n     *\n     * @param {*} key\n     * Where the value should be added.\n     *\n     * @param {*} value\n     * The value to add.\n     *\n     * @private\n     */\n    addHere(key, value) {\n        if (this.children.has(key)) {\n            this.addHereExisting(key, value);\n        } else {\n            this.addHereNew(key, value);\n        }\n    }\n\n    /**\n     * Adds the given value to the GumpSet accessible via the given key. If the\n     * value under the key is no GumpSet, an error is thrown.\n     *\n     * @param {*} key\n     * The key of the GumpSet.\n     *\n     * @param {*} value\n     * The value to add to the GumpSet.\n     *\n     * @throws {Error}\n     * If the value under the given key is no GumpSet.\n     *\n     * @private\n     */\n    addHereExisting(key, value) {\n        const nextLevel = this.children.get(key);\n        if (nextLevel instanceof GumpSet) {\n            nextLevel.add(value);\n        } else {\n            throw new Error(`Expected a GumpSet, but found ${nextLevel}.`);\n        }\n    }\n\n    /**\n     * Adds the given value to this map under the given key. If it is already\n     * an instance of GumpMap or GumpSet the value is used directly, otherwise\n     * it is wrapped in a GumpSet.\n     *\n     * @param {*} key\n     * Where the value should be added.\n     *\n     * @param {*} value\n     * The value to add.\n     *\n     * @emits {Event}\n     * If the value is used directly a new event is fired. The source is this\n     * map, the type is \"add\" and the data is an object containing the path to\n     * the value and the value itself.\n     *\n     * @private\n     */\n    addHereNew(key, value) {\n        if (value instanceof GumpMap || value instanceof GumpSet) {\n            this.setNextLevel(key, value);\n            this.size += value.size;\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"add\",\n                data:   { path: GumpPath.toGumpPath(key), value }\n            }));\n        } else {\n            const nextLevel = new GumpSet();\n            this.setNextLevel(key, nextLevel);\n            nextLevel.add(value);\n        }\n    }\n\n    /**\n     * Adds the value to a GumpMap listed under the given key.\n     *\n     * @param {*} key\n     * The GumpMap to add the value to.\n     *\n     * @param {GumpPath} remainingPath\n     * Where in that GumpMap the value should be placed.\n     *\n     * @param {*} value\n     * The value to add.\n     *\n     * @private\n     */\n    addDeeper(key, remainingPath, value) {\n        if (this.children.has(key)) {\n            this.addDeeperExisting(key, remainingPath, value);\n        } else {\n            this.addDeeperNew(key, remainingPath, value);\n        }\n    }\n\n    /**\n     * Adds the value to the GumpMap accessible via the given key. If the value\n     * under this key is no GumpMap, an error is thrown.\n     *\n     * @param {*} key\n     * The key of the GumpMap.\n     *\n     * @param {GumpPath} remainingPath\n     * Where the value should be added in the GumpMap under key.\n     *\n     * @throw {Error}\n     * If the value under key is no GumpMap.\n     *\n     * @private\n     */\n    addDeeperExisting(key, remainingPath, value) {\n        const nextLevel = this.children.get(key);\n        if (nextLevel instanceof GumpMap) {\n            nextLevel.add(remainingPath, value);\n        } else {\n            throw new Error(`Expected a GumpMap, but found ${nextLevel}.`);\n        }\n    }\n\n    /**\n     * Creates a new GumpMap under the given key and add the value at the\n     * position specified by remainingPath.\n     *\n     * @param {*} key\n     * The key of the GumpMap.\n     *\n     * @param {GumpPath} remainingPath\n     * Where the value should be added in the GumpMap under key.\n     *\n     * @param {*} value\n     * The value to add.\n     *\n     * @private\n     */\n    addDeeperNew(key, remainingPath, value) {\n        const nextLevel = new GumpMap({ autoPurgeEmptyContainers: this.autoPurgeEmptyContainers });\n        this.setNextLevel(key, nextLevel);\n        nextLevel.add(remainingPath, value);\n    }\n\n    /**\n     * A helper function that adds a GumpSet or GumpMap to this map under the\n     * given key.\n     *\n     * @param {*} key\n     * Where it should added.\n     *\n     * @param {GumpMap|GumpSet} nextLevel\n     * What should be added.\n     *\n     * @private\n     */\n    setNextLevel(key, nextLevel) {\n        this.setupListeners(nextLevel);\n        this.children.set(key, nextLevel);\n        this.childToKey.set(nextLevel, key);\n    }\n\n    /**\n     * Empties the container under the given path completely.\n     *\n     * @param {*} [path=[]]\n     * Where to find the container to empty. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     */\n    clear(path = []) {\n        path = GumpPath.toGumpPath(path);\n\n        if (path.isEmpty()) {\n            this.clearHere();\n        } else {\n            this.clearDeeper(path);\n        }\n    }\n\n    /**\n     * Clears this map.\n     *\n     * @emits {Event}\n     * If this map actually had any entries an event is fired. Its source is\n     * this map, the type is \"clear\" and data is an object. That object has a\n     * path property, which is the path from this map to the cleared data\n     * structure (it is thus the empty path). It also has another property\n     * deleted which lists the deleted entries.\n     *\n     * @private\n     */\n    clearHere() {\n        if (this.size > 0) {\n            const deleted = [...this.entries()];\n\n            for (const v of this.values({resolveMaps: false, resolveSets: false})) {\n                this.takeDownListeners(v);\n            }\n\n            this.children.clear();\n            this.size = 0;\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"clear\",\n                data:   { path: GumpPath.toGumpPath([]), deleted }\n            }));\n        }\n    }\n\n    /**\n     * Clears the container under the given path.\n     *\n     * @param {GumpPath} path\n     * Where to find the container to delete.\n     *\n     * @private\n     */\n    clearDeeper(path) {\n        const finalLevel = this.get(path);\n        if (finalLevel) {\n            finalLevel.clear();\n        }\n    }\n\n    /**\n     * Deletes the value under the given path. If no value is given, the\n     * complete data structure found under path is removed.\n     *\n     * @param {*} path\n     * Where to find the value or container to delete. It must be understood by\n     * the {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} [value]\n     * The value to delete.\n     *\n     * @return {Boolean}\n     * Whether something was removed.\n     */\n    delete(path, value = EMPTY) {\n        path = GumpPath.toGumpPath(path);\n\n        if (path.isEmpty()) {\n            return false;\n        }\n\n        const key           = path.head();\n        const remainingPath = path.tail();\n\n        if (remainingPath.isEmpty()) {\n            return this.deleteHere(key, value);\n        } else {\n            return this.deleteDeeper(key, remainingPath, value);\n        }\n    }\n\n    /**\n     * Removes the value from the container found under the given key. If no\n     * value is given, the complete container is removed.\n     *\n     * @param {*} key\n     * The key of the container.\n     *\n     * @param {*} value\n     * The value to delete.\n     *\n     * @return {Boolean}\n     * Whether something was removed.\n     *\n     * @private\n     */\n    deleteHere(key, value = EMPTY) {\n        const nextLevel = this.children.get(key);\n        if (nextLevel) {\n            if (value === EMPTY) {\n                return this.deleteHereContainer(key, nextLevel);\n            } else if (nextLevel instanceof GumpSet) {\n                return nextLevel.delete(value);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Removes the container nextLevel that can be under the given key.\n     *\n     * @param {*} key\n     * The key of nextLevel.\n     *\n     * @param {GumpMap|GumpSet} nextLevel\n     * The container to remove.\n     *\n     * @return {Boolean}\n     * Whether the container was successfully removed. The return value\n     * should always be true.\n     *\n     * @emits {Event}\n     * The source is this map, the type is \"delete\" and the data is an object\n     * with two properties. The first property path is a GumpPath containing\n     * the given key. The second property deleted lists all entries/values of\n     * the removed container, depending on whether it was a GumpMap or a\n     * GumpSet.\n     *\n     * @private\n     */\n    deleteHereContainer(key, nextLevel) {\n        const deleted = nextLevel instanceof GumpMap ?\n            [...nextLevel.entries()] : [...nextLevel.values()];\n\n        this.takeDownListeners(nextLevel);\n        this.size -= deleted.length;\n        this.fireEvent(EventManager.makeEvent({\n            source: this,\n            type:   \"delete\",\n            data:   { path: GumpPath.toGumpPath(key), deleted }\n        }));\n        return this.children.delete(key);\n    }\n\n    /**\n     * Tries to delete the given value in the data structure listed under the\n     * given key. The location relative to that child is specified by\n     * remainingPath.\n     *\n     * @param {*} key\n     * The key of the child.\n     *\n     * @param {GumpPath} remainingPath\n     * The path relative to the child.\n     *\n     * @param {*} [value]\n     * The value to delete. If it is left empty, the whole data structure is\n     * removed.\n     *\n     * @return {Boolean}\n     * Whether something was deleted.\n     *\n     * @private\n     */\n    deleteDeeper(key, remainingPath, value = EMPTY) {\n        let nextLevel = this.children.get(key);\n        if (nextLevel instanceof GumpMap) {\n            return nextLevel.delete(remainingPath, value);\n        }\n\n        return false;\n    }\n\n    /**\n     * Deletes all references to empty GumpMaps or GumpSets in this map.\n     */\n    purgeEmptyContainers() {\n        for (const [path, v] of this.entries({resolveMaps: false, resolveSets: false})) {\n            if (v.size === 0) {\n                this.delete(path);\n            } else if (v instanceof GumpMap) {\n                v.purgeEmptyContainers();\n            }\n        }\n    }\n\n    /**\n     * Returns the value under the given path or undefined if the path leads nowhere.\n     *\n     * @param {*} path\n     * Where to look for the value. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @return {*}\n     * The found value.\n     */\n    get(path) {\n        path = GumpPath.toGumpPath(path);\n\n        if (path.isEmpty()) {\n            return this;\n        }\n\n        const key           = path.head();\n        const remainingPath = path.tail();\n        const nextLevel     = this.children.get(key);\n\n        if (remainingPath.isEmpty()) {\n            return nextLevel;\n        } else if (nextLevel instanceof GumpMap) {\n            return nextLevel.get(remainingPath);\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Tests if the given value can be found under the given path. If no value\n     * is specified the method just tests if the path leads somewhere.\n     *\n     * @param {*} path\n     * Where to look for the value. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} [value]\n     * The value to test.\n     */\n    has(path, value = EMPTY) {\n        path = GumpPath.toGumpPath(path);\n\n        const finalLevel = this.get(path);\n        if (value === EMPTY) {\n            return finalLevel !== undefined;\n        } else if (finalLevel instanceof GumpSet) {\n            return finalLevel.has(value);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Yields all [path, value] entries of this GumpMap. The parameters control\n     * what is considered a value.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {Boolean} [conf.resolveMaps=true]\n     * If this parameter is true, nested GumpMaps are also traversed. Otherwise\n     * they are regarded as basic values.\n     *\n     * @param {Boolean} [conf.resolveSets=true]\n     * If this parameter is true, GumpSets are split into the values they\n     * contain. Otherwise they are viewed as basic values.\n     */\n    * entries({resolveMaps = true, resolveSets = true} = {}) {\n        for (let [k, v] of this.children.entries()) {\n            if (resolveMaps && v instanceof GumpMap) {\n                yield* this.entriesResolveMap(k, v, {resolveMaps, resolveSets});\n            } else if (resolveSets && v instanceof GumpSet) {\n                yield* this.entriesResolveSet(k, v);\n            } else {\n                yield [GumpPath.toGumpPath(k), v];\n            }\n        }\n    }\n\n    /**\n     * Yields all entries of the given map. They paths are prepended by the\n     * given key so they are relative to this map.\n     *\n     * @param {*} key\n     * The key of the GumpMap.\n     *\n     * @param {GumpMap} map\n     * The GumpMap to traverse.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @private\n     */\n    * entriesResolveMap(key, map, conf) {\n        for (let [tail, primitive] of map.entries(conf)) {\n            yield [tail.prepend(key), primitive];\n        }\n    }\n\n    /**\n     * Loops over all values of the given set and returns [key, value] entries.\n     *\n     * @param {*} key\n     * The key of the given GumpSet.\n     *\n     * @param {GumpSet} set\n     * The GumpSet to resolve.\n     *\n     * @private\n     */\n    * entriesResolveSet(key, set) {\n        for (let primitive of set.values()) {\n            yield [GumpPath.toGumpPath(key), primitive];\n        }\n    }\n\n    /**\n     * Yields all keys of the top-level map.\n     */\n    keys() {\n        return this.children.keys();\n    }\n\n    /**\n     * Yields all paths of this map.\n     *\n     * @param {Boolean} [resolveMaps=true]\n     * If this parameter is true, nested GumpMaps are also traversed and this\n     * method yields the paths to the basic values. Otherwise only one level is\n     * resolved and this method acts more like the keys method on normal maps.\n     */\n    * paths(resolveMaps = true) {\n        for (let [k, v] of this.children.entries()) {\n            if (resolveMaps && v instanceof GumpMap) {\n                yield* this.pathsResolveMap(k, v);\n            } else {\n                yield GumpPath.toGumpPath(k);\n            }\n        }\n    }\n\n    /**\n     * Yields all paths to values of the given map. The given key is prepended\n     * to each one so they are relative to this GumpMap.\n     *\n     * @param {*} key\n     * The key of the given GumpMap.\n     *\n     * @param {GumpMap} map\n     * The GumpMap to resolve.\n     *\n     * @private\n     */\n    * pathsResolveMap(key, map) {\n        for (let tail of map.paths(true)) {\n            yield tail.prepend(key);\n        }\n    }\n\n    /**\n     * Yields all values of this map. The parameters configure what is\n     * considered a value.\n     *\n     * @param {Object} [conf={}]\n     * The configuration object.\n     *\n     * @param {Boolean} [conf.resolveMaps=true]\n     * If this parameter is true, the values method of nested GumpMaps is used\n     * to retrieve their values. Otherwise they are regarded as basic values.\n     *\n     * @param {Boolean} [conf.resolveSets=true]\n     * If this parameter is true, the values method of nested GumpSets is used\n     * to retrieve their values. Otherwise they are regarded as basic values.\n     */\n    * values({resolveMaps = true, resolveSets = true} = {}) {\n        for (let v of this.children.values()) {\n            if (resolveMaps && v instanceof GumpMap) {\n                yield* v.values({resolveMaps, resolveSets});\n            } else if (resolveSets && v instanceof GumpSet) {\n                yield* v.values();\n            } else {\n                yield v;\n            }\n        }\n    }\n\n    /**\n     * Yields all path-value-pairs in the map. Nested GumpMaps and GumpSets are\n     * resolved.\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n\n    /**\n     * Replaces the given oldValue with the newValue. This change occurs at the\n     * position specified by path.\n     *\n     * @param {*} newValue\n     * The new value.\n     *\n     * @param {*} path\n     * The location of the value. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} [oldValue]\n     * The old value.\n     *\n     * @return {GumpMap}\n     * This map to make the method chainable.\n     */\n    updateWithLiteral(newValue, path, oldValue = EMPTY) {\n        path = GumpPath.toGumpPath(path);\n\n        if (this.delete(path, oldValue)) {\n            this.add(path, newValue);\n        }\n\n        return this;\n    }\n\n    /**\n     * Replaces the given value with the result of calling f on that value.\n     * This change occurs at the position specified by path.\n     *\n     * @param {Function} f\n     * The update function.\n     *\n     * @param {*} path\n     * The location of the value. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} value\n     * The value to update.\n     *\n     * @return {GumpMap}\n     * This map to make the method chainable.\n     */\n    updateWithFunction(f, path, value) {\n        path = GumpPath.toGumpPath(path);\n\n        return this.updateWithLiteral(f(value), path, value);\n    }\n\n    /**\n     * Sets the value at the given location. If the entry exists already it is\n     * replaced, otherwise a new entry is created.\n     *\n     * @param {*} path\n     * Where to place the value. It must be understood by the\n     * {@link GumpPath.toGumpPath} method.\n     *\n     * @param {*} value\n     * The value of the new entry.\n     *\n     * @return {GumpMap}\n     * This map to make the method chainable.\n     */\n    set(path, value) {\n        path = GumpPath.toGumpPath(path);\n\n        this.delete(path);\n        this.add(path, value);\n\n        return this;\n    }\n\n    /**\n     * Adds listeners to the given object.\n     *\n     * @param {Observable} obj\n     * The object to add the listeners to.\n     *\n     * @private\n     */\n    setupListeners(obj) {\n        obj.addListener(this.bubbleAddEvent, \"add\");\n        obj.addListener(this.bubbleClearEvent, \"clear\");\n        obj.addListener(this.bubbleDeleteEvent, \"delete\");\n    }\n\n    /**\n     * Removes listeners from the given object.\n     *\n     * @param {Observable} obj\n     * The object to remove the listeners from.\n     *\n     * @private\n     */\n    takeDownListeners(obj) {\n        obj.removeListener(this.bubbleAddEvent);\n        obj.removeListener(this.bubbleClearEvent);\n        obj.removeListener(this.bubbleDeleteEvent);\n    }\n\n    /**\n     * The function used to handle events emitted by children of this map.\n     *\n     * @type {Function}\n     * @private\n     */\n    bubbleEvent(e, data) {\n        const key  = this.childToKey.get(e.source);\n        const path = e.data.path ? e.data.path.prepend(key) : GumpPath.toGumpPath(key);\n        this.fireEvent(EventManager.makeEvent({\n            source: this,\n            type:   e.type,\n            data:   { path, ...data}\n        }));\n    };\n}\n\n// Make GumpMap observable\nObject.assign(GumpMap.prototype, observableExtendedMixin);\n"
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EMPTY",
    "memberof": "src/gump/GumpMap.js",
    "longname": "src/gump/GumpMap.js~EMPTY",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/gump/GumpMap.js",
    "importStyle": null,
    "description": "Signalizes that a parameter was not supplied.",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GumpMap",
    "memberof": "src/gump/GumpMap.js",
    "longname": "src/gump/GumpMap.js~GumpMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/gump/GumpMap.js",
    "importStyle": "GumpMap",
    "description": "A data structure consisting of nested maps and sets. It provides easy access\nto nested properties and monitors its children for any changes.",
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromObject",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap.fromObject",
    "access": null,
    "description": "Converts the given object to a GumpMap. Nested objects are also\ntransformed into GumpMaps and nested arrays become GumpSets.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "The object to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": "The converted object."
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "obj.initialValues",
        "description": "An iterable object containing the initial values of this map. Each entry\nin this array is expected to match [path, value], where path is the place\nwhere the value should be added."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "obj.autPurgeEmptyContainers",
        "description": "Whether a container should be deleted when it becomes empty after one of\nits entries was deleted."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": "Stores the size of this map.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "autoPurgeEmptyContainers",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#autoPurgeEmptyContainers",
    "access": "private",
    "description": "Whether a container should be deleted when it becomes empty after one of\nits entries was deleted.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#children",
    "access": "private",
    "description": "Stores the values of this map.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "childToKey",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#childToKey",
    "access": "private",
    "description": "Maps from a direct child to the key used to access it.",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#eventManager",
    "access": "private",
    "description": "Handles listeners.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bubbleAddEvent",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#bubbleAddEvent",
    "access": "private",
    "description": "Bubbles an add event.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bubbleClearEvent",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#bubbleClearEvent",
    "access": "private",
    "description": "Bubbles a clear event.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bubbleDeleteEvent",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#bubbleDeleteEvent",
    "access": "private",
    "description": "Bubbles a delete event.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#add",
    "access": null,
    "description": "Adds the given value to this map under the given path.",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where the value should be added. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addHere",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addHere",
    "access": "private",
    "description": "Adds a value directly under this map using the given key.",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Where the value should be added."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addHereExisting",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addHereExisting",
    "access": "private",
    "description": "Adds the given value to the GumpSet accessible via the given key. If the\nvalue under the key is no GumpSet, an error is thrown.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the GumpSet."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add to the GumpSet."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the value under the given key is no GumpSet."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addHereNew",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addHereNew",
    "access": "private",
    "description": "Adds the given value to this map under the given key. If it is already\nan instance of GumpMap or GumpSet the value is used directly, otherwise\nit is wrapped in a GumpSet.",
    "lineNumber": 245,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Where the value should be added."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the value is used directly a new event is fired. The source is this\nmap, the type is \"add\" and the data is an object containing the path to\nthe value and the value itself."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addDeeper",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addDeeper",
    "access": "private",
    "description": "Adds the value to a GumpMap listed under the given key.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The GumpMap to add the value to."
      },
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "remainingPath",
        "description": "Where in that GumpMap the value should be placed."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addDeeperExisting",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addDeeperExisting",
    "access": "private",
    "description": "Adds the value to the GumpMap accessible via the given key. If the value\nunder this key is no GumpMap, an error is thrown.",
    "lineNumber": 298,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{Error}\nIf the value under key is no GumpMap."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the GumpMap."
      },
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "remainingPath",
        "description": "Where the value should be added in the GumpMap under key."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addDeeperNew",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#addDeeperNew",
    "access": "private",
    "description": "Creates a new GumpMap under the given key and add the value at the\nposition specified by remainingPath.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the GumpMap."
      },
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "remainingPath",
        "description": "Where the value should be added in the GumpMap under key."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setNextLevel",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#setNextLevel",
    "access": "private",
    "description": "A helper function that adds a GumpSet or GumpMap to this map under the\ngiven key.",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Where it should added."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap",
          "GumpSet"
        ],
        "spread": false,
        "optional": false,
        "name": "nextLevel",
        "description": "What should be added."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#clear",
    "access": null,
    "description": "Empties the container under the given path completely.",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "path",
        "description": "Where to find the container to empty. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearHere",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#clearHere",
    "access": "private",
    "description": "Clears this map.",
    "lineNumber": 375,
    "params": [],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If this map actually had any entries an event is fired. Its source is\nthis map, the type is \"clear\" and data is an object. That object has a\npath property, which is the path from this map to the cleared data\nstructure (it is thus the empty path). It also has another property\ndeleted which lists the deleted entries."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearDeeper",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#clearDeeper",
    "access": "private",
    "description": "Clears the container under the given path.",
    "lineNumber": 402,
    "params": [
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where to find the container to delete."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#delete",
    "access": null,
    "description": "Deletes the value under the given path. If no value is given, the\ncomplete data structure found under path is removed.",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where to find the value or container to delete. It must be understood by\nthe {@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether something was removed."
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteHere",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#deleteHere",
    "access": "private",
    "description": "Removes the value from the container found under the given key. If no\nvalue is given, the complete container is removed.",
    "lineNumber": 455,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the container."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether something was removed."
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteHereContainer",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#deleteHereContainer",
    "access": "private",
    "description": "Removes the container nextLevel that can be under the given key.",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of nextLevel."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap",
          "GumpSet"
        ],
        "spread": false,
        "optional": false,
        "name": "nextLevel",
        "description": "The container to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the container was successfully removed. The return value\nshould always be true."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "The source is this map, the type is \"delete\" and the data is an object\nwith two properties. The first property path is a GumpPath containing\nthe given key. The second property deleted lists all entries/values of\nthe removed container, depending on whether it was a GumpMap or a\nGumpSet."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#size",
    "access": null,
    "description": null,
    "lineNumber": 495,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteDeeper",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#deleteDeeper",
    "access": "private",
    "description": "Tries to delete the given value in the data structure listed under the\ngiven key. The location relative to that child is specified by\nremainingPath.",
    "lineNumber": 524,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the child."
      },
      {
        "nullable": null,
        "types": [
          "GumpPath"
        ],
        "spread": false,
        "optional": false,
        "name": "remainingPath",
        "description": "The path relative to the child."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to delete. If it is left empty, the whole data structure is\nremoved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether something was deleted."
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "purgeEmptyContainers",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#purgeEmptyContainers",
    "access": null,
    "description": "Deletes all references to empty GumpMaps or GumpSets in this map.",
    "lineNumber": 536,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#get",
    "access": null,
    "description": "Returns the value under the given path or undefined if the path leads nowhere.",
    "lineNumber": 556,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where to look for the value. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The found value."
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "has",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#has",
    "access": null,
    "description": "Tests if the given value can be found under the given path. If no value\nis specified the method just tests if the path leads somewhere.",
    "lineNumber": 587,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where to look for the value. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to test."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#entries",
    "access": null,
    "description": "Yields all [path, value] entries of this GumpMap. The parameters control\nwhat is considered a value.",
    "lineNumber": 615,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.resolveMaps",
        "description": "If this parameter is true, nested GumpMaps are also traversed. Otherwise\nthey are regarded as basic values."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.resolveSets",
        "description": "If this parameter is true, GumpSets are split into the values they\ncontain. Otherwise they are viewed as basic values."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entriesResolveMap",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#entriesResolveMap",
    "access": "private",
    "description": "Yields all entries of the given map. They paths are prepended by the\ngiven key so they are relative to this map.",
    "lineNumber": 642,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the GumpMap."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "The GumpMap to traverse."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entriesResolveSet",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#entriesResolveSet",
    "access": "private",
    "description": "Loops over all values of the given set and returns [key, value] entries.",
    "lineNumber": 659,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the given GumpSet."
      },
      {
        "nullable": null,
        "types": [
          "GumpSet"
        ],
        "spread": false,
        "optional": false,
        "name": "set",
        "description": "The GumpSet to resolve."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "keys",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#keys",
    "access": null,
    "description": "Yields all keys of the top-level map.",
    "lineNumber": 668,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paths",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#paths",
    "access": null,
    "description": "Yields all paths of this map.",
    "lineNumber": 680,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "resolveMaps",
        "description": "If this parameter is true, nested GumpMaps are also traversed and this\nmethod yields the paths to the basic values. Otherwise only one level is\nresolved and this method acts more like the keys method on normal maps."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pathsResolveMap",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#pathsResolveMap",
    "access": "private",
    "description": "Yields all paths to values of the given map. The given key is prepended\nto each one so they are relative to this GumpMap.",
    "lineNumber": 702,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the given GumpMap."
      },
      {
        "nullable": null,
        "types": [
          "GumpMap"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "The GumpMap to resolve."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#values",
    "access": null,
    "description": "Yields all values of this map. The parameters configure what is\nconsidered a value.",
    "lineNumber": 723,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.resolveMaps",
        "description": "If this parameter is true, the values method of nested GumpMaps is used\nto retrieve their values. Otherwise they are regarded as basic values."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "conf.resolveSets",
        "description": "If this parameter is true, the values method of nested GumpSets is used\nto retrieve their values. Otherwise they are regarded as basic values."
      }
    ],
    "generator": true
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#[Symbol.iterator]",
    "access": null,
    "description": "Yields all path-value-pairs in the map. Nested GumpMaps and GumpSets are\nresolved.",
    "lineNumber": 739,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateWithLiteral",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#updateWithLiteral",
    "access": null,
    "description": "Replaces the given oldValue with the newValue. This change occurs at the\nposition specified by path.",
    "lineNumber": 760,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "The new value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The location of the value. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "oldValue",
        "description": "The old value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": "This map to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateWithFunction",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#updateWithFunction",
    "access": null,
    "description": "Replaces the given value with the result of calling f on that value.\nThis change occurs at the position specified by path.",
    "lineNumber": 787,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The update function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The location of the value. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to update."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": "This map to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#set",
    "access": null,
    "description": "Sets the value at the given location. If the entry exists already it is\nreplaced, otherwise a new entry is created.",
    "lineNumber": 807,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Where to place the value. It must be understood by the\n{@link GumpPath.toGumpPath} method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the new entry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpMap"
      ],
      "spread": false,
      "description": "This map to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setupListeners",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#setupListeners",
    "access": "private",
    "description": "Adds listeners to the given object.",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "Observable"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to add the listeners to."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "takeDownListeners",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#takeDownListeners",
    "access": "private",
    "description": "Removes listeners from the given object.",
    "lineNumber": 838,
    "params": [
      {
        "nullable": null,
        "types": [
          "Observable"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to remove the listeners from."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bubbleEvent",
    "memberof": "src/gump/GumpMap.js~GumpMap",
    "longname": "src/gump/GumpMap.js~GumpMap#bubbleEvent",
    "access": "private",
    "description": "The function used to handle events emitted by children of this map.",
    "lineNumber": 850,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gump/GumpPath.js",
    "memberof": null,
    "longname": "src/gump/GumpPath.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\n * Represents paths for nested map/set structures.\n */\nexport default class GumpPath {\n\n    /**\n     * Normalizes the given path. GumpPaths are used unchanged. Strings are\n     * converted using the fromString method with \".\" as separator. Iterables\n     * are translated using the normal constructor. Other values are wrapped\n     * into an iterable and again converted using the constructor.\n     *\n     * @param {GumpPath|String|Iterable|*} path\n     * A representation of the path.\n     *\n     * @return {GumpPath}\n     * The normalized path.\n     */\n    static toGumpPath(path) {\n        if (path instanceof GumpPath) {\n            return path;\n        } else if (path                     &&\n                   path[Symbol.iterator]    &&\n                   typeof path !== \"string\" &&\n                   typeof path !== \"number\") { // Number has to be excluded because it has [Symbol.iterator] (bug)\n            return new GumpPath(path);\n        } else {\n            return new GumpPath([path]);\n        }\n    }\n\n    /**\n     * Creates a GumpPath from a string.\n     *\n     * @param {String} s\n     * The string describing the path. If s is empty the resulting path is not\n     * going to be empty. It has length 1 and contains the empty string as key.\n     *\n     * @param {String} [separator=\".\"]\n     * The string used to split s into keys.\n     */\n    static fromString(s, separator = \".\") {\n        const keys = s.split(separator);\n        return new GumpPath(keys);\n    }\n\n    /**\n     * @param {Iterable} keys\n     * Yields the keys the path is made of.\n     */\n    constructor(keys) {\n\n        /**\n         * The keys of this path.\n         *\n         * @type {Array<*>}\n         * @private\n         */\n        this.keys = [...keys];\n    }\n\n    /**\n     * The number of keys of this path.\n     *\n     * @type {Number}\n     */\n    get length() {\n        return this.keys.length;\n    }\n\n    /**\n     * Returns the first key of this path.\n     *\n     * @return {*}\n     * The first key of this path.\n     */\n    head() {\n        return this.keys[0];\n    }\n\n    /**\n     * Returns path with every key of this path but the first.\n     *\n     * @return {GumpPath}\n     * The created path.\n     */\n    tail() {\n        return new GumpPath(this.keys.slice(1));\n    }\n\n    /**\n     * Returns the last key of this path.\n     *\n     * @return {*}\n     * The last key of this path.\n     */\n    last() {\n        return this.keys[this.keys.length - 1];\n    }\n\n    /**\n     * Returns path with every key of this path but the last.\n     *\n     * @return {GumpPath}\n     * The remaining path.\n     */\n    init() {\n        return new GumpPath(this.keys.slice(0, -1));\n    }\n\n    /**\n     * Returns the key at the given position.\n     *\n     * @param {Number} index\n     * The index of the key.\n     *\n     * @return {*}\n     * The key at the given position.\n     */\n    keyAt(index) {\n        return this.keys[index];\n    }\n\n    /**\n     * Returns a new path with the given key added to the end of this path.\n     *\n     * @param {*} key\n     * The key to add.\n     *\n     * @return {GumpPath}\n     * The created path.\n     */\n    append(key) {\n        return new GumpPath([...this.keys, key]);\n    }\n\n    /**\n     * Returns a new path with the given key added to the beginning of this\n     * path.\n     *\n     * @param {*} key\n     * The key to add.\n     *\n     * @return {GumpPath}\n     * The created path.\n     */\n    prepend(key) {\n        return new GumpPath([key, ...this.keys]);\n    }\n\n    /**\n     * Returns a new path with the given key at the specified position. The\n     * keys of this path are placed around it.\n     *\n     * @param {*} key\n     * The key to add.\n     *\n     * @param {Number} index\n     * The position of the new key.\n     *\n     * @return {GumpPath}\n     * The created path.\n     */\n    insertAt(key, index) {\n        return new GumpPath([\n            ...this.keys.slice(0, index),\n            key,\n            ...this.keys.slice(index)\n        ]);\n    }\n\n    /**\n     * Tests if this path has length 0.\n     *\n     * @return {Boolean}\n     * If this path has length 0.\n     */\n    isEmpty() {\n        return this.keys.length === 0;\n    }\n\n    /**\n     * Returns a string representing this path.\n     *\n     * @return {String}\n     * A string representation of this path.\n     */\n    toString() {\n        return this.keys.join(\".\");\n    }\n}\n"
  },
  {
    "__docId__": 122,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GumpPath",
    "memberof": "src/gump/GumpPath.js",
    "longname": "src/gump/GumpPath.js~GumpPath",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/gump/GumpPath.js",
    "importStyle": "GumpPath",
    "description": "Represents paths for nested map/set structures.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toGumpPath",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath.toGumpPath",
    "access": null,
    "description": "Normalizes the given path. GumpPaths are used unchanged. Strings are\nconverted using the fromString method with \".\" as separator. Iterables\nare translated using the normal constructor. Other values are wrapped\ninto an iterable and again converted using the constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "GumpPath",
          "String",
          "Iterable",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "A representation of the path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The normalized path."
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromString",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath.fromString",
    "access": null,
    "description": "Creates a GumpPath from a string.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string describing the path. If s is empty the resulting path is not\ngoing to be empty. It has length 1 and contains the empty string as key."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\".\"",
        "defaultRaw": ".",
        "name": "separator",
        "description": "The string used to split s into keys."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#constructor",
    "access": null,
    "description": "",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "Yields the keys the path is made of."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "keys",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#keys",
    "access": "private",
    "description": "The keys of this path.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Array<*>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "length",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#length",
    "access": null,
    "description": "The number of keys of this path.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "head",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#head",
    "access": null,
    "description": "Returns the first key of this path.",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The first key of this path."
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "tail",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#tail",
    "access": null,
    "description": "Returns path with every key of this path but the first.",
    "lineNumber": 86,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The created path."
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "last",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#last",
    "access": null,
    "description": "Returns the last key of this path.",
    "lineNumber": 96,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The last key of this path."
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#init",
    "access": null,
    "description": "Returns path with every key of this path but the last.",
    "lineNumber": 106,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The remaining path."
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "keyAt",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#keyAt",
    "access": null,
    "description": "Returns the key at the given position.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the key."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The key at the given position."
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#append",
    "access": null,
    "description": "Returns a new path with the given key added to the end of this path.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The created path."
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepend",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#prepend",
    "access": null,
    "description": "Returns a new path with the given key added to the beginning of this\npath.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The created path."
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertAt",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#insertAt",
    "access": null,
    "description": "Returns a new path with the given key at the specified position. The\nkeys of this path are placed around it.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to add."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The position of the new key."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpPath"
      ],
      "spread": false,
      "description": "The created path."
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#isEmpty",
    "access": null,
    "description": "Tests if this path has length 0.",
    "lineNumber": 177,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If this path has length 0."
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/gump/GumpPath.js~GumpPath",
    "longname": "src/gump/GumpPath.js~GumpPath#toString",
    "access": null,
    "description": "Returns a string representing this path.",
    "lineNumber": 187,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representation of this path."
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gump/GumpSet.js",
    "memberof": null,
    "longname": "src/gump/GumpSet.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import EventManager              from \"../EventManager.js\";\nimport {observableExtendedMixin} from \"../Observable.js\";\n\n/**\n * Bundles multiples possible values into one.\n *\n * @implements {Observable}\n */\nexport default class GumpSet {\n\n    /**\n     * @param {Iterable} [initialValues=[]]\n     * The initial values of the set.\n     */\n    constructor(initialValues = []) {\n\n        /**\n         * Contains the values of this set.\n         *\n         * @type {Set}\n         * @private\n         */\n        this.children = new Set(initialValues); // TODO remove this.children with super once subclassing is supported\n\n        /**\n         * Handles listeners.\n         *\n         * @type {EventManager}\n         * @private\n         */\n        this.eventManager = new EventManager();\n    }\n\n    /**\n     * Adds the given value to this set.\n     *\n     * @param {*} value\n     * The value to add.\n     *\n     * @return {GumpSet}\n     * This set to make the method chainable.\n     *\n     * @emits {Event}\n     * If the set was changed by this operation, an event is fired. The source\n     * is set to this set, the type is \"add\" and the data is the added value.\n     */\n    add(value) {\n        const sizeBefore = this.size;\n        this.children.add(value);\n        const sizeAfter = this.size;\n\n        if (sizeBefore !== sizeAfter) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type: \"add\",\n                data: { value }\n            }));\n        }\n\n        return this;\n    }\n\n    /**\n     * Empties the complete set.\n     *\n     * @emits {Event}\n     * If the set was changed, an event is fired. The source is set to this set,\n     * the type is \"clear\" and the data is an array with the deleted values.\n     */\n    clear() {\n        if (this.size > 0) {\n            const deleted = [...this.values()];\n            this.children.clear();\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type: \"clear\",\n                data: { deleted }\n            }));\n        }\n    }\n\n    /**\n     * Removes the given value from this set.\n     *\n     * @param {*} value\n     * The value to remove.\n     *\n     * @return {Boolean}\n     * Whether the set was changed by this operation. If the given value did\n     * not exist in the set false is returned. Otherwise the result is true.\n     *\n     * @emits {Event}\n     * If the set was changed, an event is fired. The source is set to this\n     * set, the type is \"delete\" and the data is the deleted value.\n     */\n    delete(value) {\n        const hasChanged = this.children.delete(value);\n\n        if (hasChanged) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type: \"delete\",\n                data: { value, deleted: [value] }\n            }));\n        }\n\n        return hasChanged;\n    }\n\n    // ------ Begin remove once subclassing set is supported\n\n    /**\n     *\n     */\n    get size() {\n        return this.children.size;\n    }\n\n    /**\n     *\n     */\n    entries() {\n        return this.children.entries();\n    }\n\n    /**\n     *\n     */\n    has(value) {\n        return this.children.has(value);\n    }\n\n    /**\n     *\n     */\n    keys() {\n        return this.children.keys();\n    }\n\n    /**\n     *\n     */\n    values() {\n        return this.children.values();\n    }\n\n    /**\n     *\n     */\n    [Symbol.iterator]() {\n        return this.children[Symbol.iterator]();\n    }\n    // ------ End remove\n\n    /**\n     * Replaces the old value in the set with the new one.\n     *\n     * @param {*} newValue\n     * The new value.\n     *\n     * @param {*} oldValue\n     * The value to replace.\n     *\n     * @return {GumpSet}\n     * This set to make the method chainable.\n     */\n    updateWithLiteral(newValue, oldValue) {\n        if (this.has(oldValue)) {\n            this.delete(oldValue);\n            this.add(newValue);\n        }\n\n        return this;\n    }\n\n    /**\n     * Replaces the given value with the result of calling f on it.\n     *\n     * @param {Function} f\n     * The update function.\n     *\n     * @param {*} [value]\n     * The value to change.\n     *\n     * @return {GumpSet}\n     * This set to make the method chainable.\n     */\n    updateWithFunction(f, value) {\n        return this.updateWithLiteral(f(value), value);\n    }\n\n    /**\n     * Returns a string representing the set.\n     *\n     * @return {String}\n     * A string representation of this set.\n     */\n    toString() {\n        let s = \"{\";\n\n        let i = this.size - 1;\n        for (let v of this.values()) {\n            s += v + (i === 0 ? \"\" : \", \");\n            i--;\n        }\n\n        return s + \"}\";\n    }\n}\n\n// Make GumpSets observable\nObject.assign(GumpSet.prototype, observableExtendedMixin);\n"
  },
  {
    "__docId__": 139,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GumpSet",
    "memberof": "src/gump/GumpSet.js",
    "longname": "src/gump/GumpSet.js~GumpSet",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/gump/GumpSet.js",
    "importStyle": "GumpSet",
    "description": "Bundles multiples possible values into one.",
    "lineNumber": 9,
    "interface": false,
    "implements": [
      "Observable"
    ]
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValues",
        "description": "The initial values of the set."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#children",
    "access": "private",
    "description": "Contains the values of this set.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#eventManager",
    "access": "private",
    "description": "Handles listeners.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#add",
    "access": null,
    "description": "Adds the given value to this set.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpSet"
      ],
      "spread": false,
      "description": "This set to make the method chainable."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the set was changed by this operation, an event is fired. The source\nis set to this set, the type is \"add\" and the data is the added value."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#clear",
    "access": null,
    "description": "Empties the complete set.",
    "lineNumber": 70,
    "params": [],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the set was changed, an event is fired. The source is set to this set,\nthe type is \"clear\" and the data is an array with the deleted values."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#delete",
    "access": null,
    "description": "Removes the given value from this set.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the set was changed by this operation. If the given value did\nnot exist in the set false is returned. Otherwise the result is true."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the set was changed, an event is fired. The source is set to this\nset, the type is \"delete\" and the data is the deleted value."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#size",
    "access": null,
    "description": "",
    "lineNumber": 116,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#entries",
    "access": null,
    "description": "",
    "lineNumber": 123,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "has",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#has",
    "access": null,
    "description": "",
    "lineNumber": 130,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "keys",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#keys",
    "access": null,
    "description": "",
    "lineNumber": 137,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#values",
    "access": null,
    "description": "",
    "lineNumber": 144,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#[Symbol.iterator]",
    "access": null,
    "description": "",
    "lineNumber": 151,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateWithLiteral",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#updateWithLiteral",
    "access": null,
    "description": "Replaces the old value in the set with the new one.",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "The new value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldValue",
        "description": "The value to replace."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpSet"
      ],
      "spread": false,
      "description": "This set to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateWithFunction",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#updateWithFunction",
    "access": null,
    "description": "Replaces the given value with the result of calling f on it.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The update function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value to change."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GumpSet"
      ],
      "spread": false,
      "description": "This set to make the method chainable."
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/gump/GumpSet.js~GumpSet",
    "longname": "src/gump/GumpSet.js~GumpSet#toString",
    "access": null,
    "description": "Returns a string representing the set.",
    "lineNumber": 199,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string representation of this set."
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gump/gump.js",
    "memberof": null,
    "longname": "src/gump/gump.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import \"babel-regenerator-runtime\";\n\nexport GumpMap  from \"./GumpMap.js\";\nexport GumpPath from \"./GumpPath.js\";\nexport GumpSet  from \"./GumpSet.js\";"
  },
  {
    "__docId__": 156,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tolkien/Tolkien1To1Map.js",
    "memberof": null,
    "longname": "src/tolkien/Tolkien1To1Map.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import TolkienMap from \"./TolkienMap.js\";\n\n/**\n * A bidirectional 1 to 1 map.\n */\nexport default class Tolkien1To1Map extends TolkienMap {\n\n    /**\n     * @param {Array} [initialValues=[]]\n     * The initial entries of the map. Those are added to the map in the order\n     * specified by the array.\n     */\n    constructor(initialValues = []) {\n        super(Map, Map, initialValues);\n    }\n\n    /**\n     * @private\n     * @override\n     */\n    addImp(x, y) {\n        this.deleteX(x);\n        this.deleteY(y);\n\n        this.xToY.set(x, y);\n        this.yToX.set(y, x);\n    }\n\n    /**\n     * @override\n     */\n    deleteX(x) {\n        if (this.hasX(x)) {\n            const [y] = this.convertXToY(x);\n            this.xToY.delete(x);\n            this.yToX.delete(y);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    deleteY(y) {\n        if (this.hasY(y)) {\n            const [x] = this.convertYToX(y);\n            this.xToY.delete(x);\n            this.yToX.delete(y);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    deletePair(x, y) {\n        if (this.hasPair(x, y)) {\n            this.xToY.delete(x);\n            this.yToX.delete(y);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    convertXToY(x) {\n        return this.hasX(x) ? [this.xToY.get(x)] : [];\n    }\n\n    /**\n     * @override\n     */\n    convertYToX(y) {\n        return this.hasY(y) ? [this.yToX.get(y)] : [];\n    }\n\n    /**\n     * @override\n     */\n    hasPair(x, y) {\n        return this.xToY.get(x) === y;\n    }\n\n    /**\n     * @override\n     */\n    * xs() {\n        yield* this.xToY.keys();\n    }\n\n    /**\n     * @override\n     */\n    * entries() {\n        yield* this.xToY.entries();\n    }\n}"
  },
  {
    "__docId__": 157,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Tolkien1To1Map",
    "memberof": "src/tolkien/Tolkien1To1Map.js",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tolkien/Tolkien1To1Map.js",
    "importStyle": "Tolkien1To1Map",
    "description": "A bidirectional 1 to 1 map.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/tolkien/TolkienMap.js~TolkienMap"
    ]
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValues",
        "description": "The initial entries of the map. Those are added to the map in the order\nspecified by the array."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addImp",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#addImp",
    "access": "private",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteX",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#deleteX",
    "access": null,
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteY",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#deleteY",
    "access": null,
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deletePair",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#deletePair",
    "access": null,
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertXToY",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#convertXToY",
    "access": null,
    "description": "",
    "lineNumber": 67,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertYToX",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#convertYToX",
    "access": null,
    "description": "",
    "lineNumber": 74,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPair",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#hasPair",
    "access": null,
    "description": "",
    "lineNumber": 81,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "xs",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#xs",
    "access": null,
    "description": "",
    "lineNumber": 88,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map",
    "longname": "src/tolkien/Tolkien1To1Map.js~Tolkien1To1Map#entries",
    "access": null,
    "description": "",
    "lineNumber": 95,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 168,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tolkien/Tolkien1ToNMap.js",
    "memberof": null,
    "longname": "src/tolkien/Tolkien1ToNMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {GumpMap}  from \"../gump/gump.js\";\nimport TolkienMap from \"./TolkienMap.js\";\n\n/**\n * A bidirectional 1 to N map.\n */\nexport default class Tolkien1ToNMap extends TolkienMap {\n\n    /**\n     * @param {Array} [initialValues=[]]\n     * The initial entries of the map. Those are added to the map in the order\n     * specified by the array.\n     */\n    constructor(initialValues = []) {\n        super(GumpMap, Map, initialValues);\n    }\n\n    /**\n     * @private\n     * @override\n     */\n    addImp(x, y) {\n        this.deleteY(y);\n\n        this.xToY.add(x, y);\n        this.yToX.set(y, x);\n    }\n\n    /**\n     * @override\n     */\n    deleteX(x) {\n        if (this.hasX(x)) {\n            const ys = this.convertXToY(x);\n            this.xToY.delete(x);\n            for (const y of ys) {\n                this.yToX.delete(y);\n            }\n            return ys.map(y => [x, y]);\n        }\n    }\n\n    /**\n     * @override\n     */\n    deleteY(y) {\n        if (this.hasY(y)) {\n            const [x] = this.convertYToX(y);\n            this.xToY.delete(x);\n            this.yToX.delete(y);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    deletePair(x, y) {\n        if (this.hasPair(x, y)) {\n            this.xToY.delete(x, y);\n            this.yToX.delete(y);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    convertXToY(x) {\n        return this.hasX(x) ? [...this.xToY.get(x)] : [];\n    }\n\n    /**\n     * @override\n     */\n    convertYToX(y) {\n        return this.hasY(y) ?  [this.yToX.get(y)] : [];\n    }\n\n    /**\n     * @override\n     */\n    hasPair(x, y) {\n        return this.xToY.has(x, y);\n    }\n\n    /**\n     * @override\n     */\n    * xs() {\n        for (let xPath of this.xToY.paths()) {\n            yield xPath.head();\n        }\n    }\n\n    /**\n     * @override\n     */\n    * entries() {\n        for (let [xPath, y] of this.xToY.entries()) {\n            yield [xPath.head(), y];\n        }\n    }\n}"
  },
  {
    "__docId__": 169,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Tolkien1ToNMap",
    "memberof": "src/tolkien/Tolkien1ToNMap.js",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tolkien/Tolkien1ToNMap.js",
    "importStyle": "Tolkien1ToNMap",
    "description": "A bidirectional 1 to N map.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/tolkien/TolkienMap.js~TolkienMap"
    ]
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValues",
        "description": "The initial entries of the map. Those are added to the map in the order\nspecified by the array."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addImp",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#addImp",
    "access": "private",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteX",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#deleteX",
    "access": null,
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteY",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#deleteY",
    "access": null,
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deletePair",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#deletePair",
    "access": null,
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertXToY",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#convertXToY",
    "access": null,
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertYToX",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#convertYToX",
    "access": null,
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPair",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#hasPair",
    "access": null,
    "description": "",
    "lineNumber": 83,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "xs",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#xs",
    "access": null,
    "description": "",
    "lineNumber": 90,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap",
    "longname": "src/tolkien/Tolkien1ToNMap.js~Tolkien1ToNMap#entries",
    "access": null,
    "description": "",
    "lineNumber": 99,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 180,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tolkien/TolkienMToNMap.js",
    "memberof": null,
    "longname": "src/tolkien/TolkienMToNMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {GumpMap}  from \"../gump/gump.js\";\nimport TolkienMap from \"./TolkienMap.js\";\n\n/**\n * A bidirectional M to N map.\n */\nexport default class TolkienMToNMap extends TolkienMap {\n\n    /**\n     * @param {Array} [initialValues[]]\n     * The initial entries of the map. Those are added to the map in the order\n     * specified by the array.\n     */\n    constructor(initialValues = []) {\n        super(GumpMap, GumpMap, initialValues);\n    }\n\n    /**\n     * @private\n     * @override\n     */\n    addImp(x, y) {\n        this.xToY.add(x, y);\n        this.yToX.add(y, x);\n    }\n\n    /**\n     * @override\n     */\n    deleteX(x) {\n        if (this.hasX(x)) {\n            const ys = this.convertXToY(x);\n            this.xToY.delete(x);\n            for (const y of ys) {\n                this.yToX.delete(y);\n            }\n            return ys.map(y => [x, y]);\n        }\n    }\n\n    /**\n     * @override\n     */\n    deleteY(y) {\n        if (this.hasY(y)) {\n            const xs = this.convertYToX(y);\n            this.yToX.delete(y);\n            for (const x of xs) {\n                this.xToY.delete(x);\n            }\n            return xs.map(x => [x, y]);\n        }\n    }\n\n    /**\n     * @override\n     */\n    deletePair(x, y) {\n        if (this.hasPair(x, y)) {\n            this.xToY.delete(x, y);\n            this.yToX.delete(y, x);\n            return [[x, y]];\n        }\n    }\n\n    /**\n     * @override\n     */\n    convertXToY(x) {\n        return this.hasX(x) ? [...this.xToY.get(x)] : [];\n    }\n\n    /**\n     * @override\n     */\n    convertYToX(y) {\n        return this.hasY(y) ? [...this.yToX.get(y)] : [];\n    }\n\n    /**\n     * @override\n     */\n    hasPair(x, y) {\n        return this.xToY.has(x, y);\n    }\n\n    /**\n     * @override\n     */\n    * xs() {\n        for (let xPath of this.xToY.paths()) {\n            yield xPath.head();\n        }\n    }\n\n    /**\n     * @override\n     */\n    * entries() {\n        for (let [xPath, y] of this.xToY.entries()) {\n            yield [xPath.head(), y];\n        }\n    }\n}"
  },
  {
    "__docId__": 181,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TolkienMToNMap",
    "memberof": "src/tolkien/TolkienMToNMap.js",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tolkien/TolkienMToNMap.js",
    "importStyle": "TolkienMToNMap",
    "description": "A bidirectional M to N map.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/tolkien/TolkienMap.js~TolkienMap"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "initialValues[]",
        "description": "The initial entries of the map. Those are added to the map in the order\nspecified by the array."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addImp",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#addImp",
    "access": "private",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "override": true,
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteX",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#deleteX",
    "access": null,
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteY",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#deleteY",
    "access": null,
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deletePair",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#deletePair",
    "access": null,
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertXToY",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#convertXToY",
    "access": null,
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertYToX",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#convertYToX",
    "access": null,
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPair",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#hasPair",
    "access": null,
    "description": "",
    "lineNumber": 83,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "xs",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#xs",
    "access": null,
    "description": "",
    "lineNumber": 90,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 191,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap",
    "longname": "src/tolkien/TolkienMToNMap.js~TolkienMToNMap#entries",
    "access": null,
    "description": "",
    "lineNumber": 99,
    "params": [],
    "override": true,
    "generator": true
  },
  {
    "__docId__": 192,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tolkien/TolkienMap.js",
    "memberof": null,
    "longname": "src/tolkien/TolkienMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import EventManager              from \"../EventManager.js\";\nimport {observableExtendedMixin} from \"../Observable.js\";\n\n/**\n * Signalizes that a parameter was not supplied.\n *\n * @ignore\n */\nconst EMPTY = Symbol(\"default\");\n\n/**\n * An abstract class for bidirectional maps. The name is inspired by\n * \"The Hobbit or There and Back Again\" by J. R. R. Tolkien.\n */\nexport default class TolkienMap {\n\n    /**\n     * @param {Function} XCon\n     * The constructor to use for the xToY map.\n     *\n     * @param {Function} YCon\n     * The constructor to use for the yToX map.\n     *\n     * @param {Array} [initialValues=[]]\n     * The initial entries of the map. Those are added to the map in the order\n     * specified by the array.\n     */\n    constructor(XCon, YCon, initialValues = []) {\n\n        /**\n         * Maps from x-values to y-values.\n         *\n         * @type {Map|GumpMap}\n         * @private\n         */\n        this.xToY = new XCon();\n\n        /**\n         * Maps from y-values to x-values.\n         *\n         * @type {Map|GumpMap}\n         * @private\n         */\n        this.yToX = new YCon();\n\n        /**\n         * Handles events and listeners.\n         *\n         * @type {EventManager}\n         * @private\n         */\n        this.eventManager = new EventManager();\n\n        // Add initial values\n        for (let [x, y] of initialValues) {\n            this.add(x, y);\n        }\n    }\n\n    /**\n     * The number of entries in this map.\n     *\n     * @type {Number}\n     */\n    get size() {\n        return this.xToY.size;\n    }\n\n    /**\n     * Connects the given values.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @return {TolkienMap}\n     * This map to make the method chainable.\n     *\n     * @emits {Event}\n     * If this operation changed the map an event is fired. Its source is this\n     * map, the type is \"add\" and the data is an object containing the provided\n     * x and y parameters.\n     */\n    add(x, y) {\n        if (!this.hasPair(x, y)) {\n            this.addImp(x, y);\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"add\",\n                data:   {x, y}\n            }));\n        }\n        return this;\n    }\n\n    /**\n     * Called by the add template method. Subclasses should implement the actual\n     * inclusion of the given pair in this method.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @private\n     * @abstract\n     */\n    addImp(x, y) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Removes all entries from this map.\n     *\n     * @emits {Event}\n     * If the map was changed by this operation, an event is triggered. The\n     * source is this map, the type is \"clear\" and the data is an array of the\n     * deleted entries.\n     */\n    clear() {\n        if (this.size > 0) {\n            const deleted = [...this.entries()];\n\n            this.xToY.clear();\n            this.yToX.clear();\n\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"clear\",\n                data:   deleted\n            }));\n        }\n    }\n\n    /**\n     * Removes all entries with the given x-value.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @abstract\n     */\n    deleteX(x) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Removes all entries with the given y-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @abstract\n     */\n    deleteY(y) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Removes the entry mapping the x-value to the y-value.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @abstract\n     */\n    deletePair(x, y) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Removes the entries with the given x- and y-value. At least one of them\n     * must be provided.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.x]\n     * The x-value.\n     *\n     * @param {*} [conf.y]\n     * The y-value.\n     *\n     * @emits {Event}\n     * If the map was changed by this operation and event is triggered. Its\n     * source is this map, the type is \"delete\" and the data is an object. It\n     * contains the given x- and y-values and it has a property deleted listing\n     * the removed entries.\n     */\n    delete({x = EMPTY, y = EMPTY} = {}) {\n        const data = {};\n        if (x === EMPTY) {\n            data.y = y;\n            data.deleted = this.deleteY(y);\n        } else if (y === EMPTY) {\n            data.x = x;\n            data.deleted = this.deleteX(x);\n        } else {\n            data.x = x;\n            data.y = y;\n            data.deleted = this.deletePair(x, y);\n        }\n\n        if (data.deleted) {\n            this.fireEvent(EventManager.makeEvent({\n                source: this,\n                type:   \"delete\",\n                data:   data\n            }));\n        }\n    }\n\n    /**\n     * Returns the y-values that correspond to x.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @return {Array}\n     * An array of the corresponding y-values.\n     *\n     * @abstract\n     */\n    convertXToY(x) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Returns the x-value that correspond to y.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @return {Array}\n     * An array of the corresponding x-values.\n     *\n     * @abstract\n     */\n    convertYToX(y) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Tests if an entry with the given x-value exists.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @return {Boolean}\n     * If an entry with the given x-value exists.\n     */\n    hasX(x) {\n        return this.xToY.has(x);\n    }\n\n    /**\n     * Tests if an entry with the given y-value exists.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @return {Boolean}\n     * If an entry with the given y-value exists.\n     */\n    hasY(y) {\n        return this.yToX.has(y);\n    }\n\n    /**\n     * Tests if an entry with the given x- and y-value exists.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @return {Boolean}\n     * If an entry with the given x- and y-value exists.\n     */\n    hasPair(x, y) {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Tests if an entry with the given x-value or the given y-value exists.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     *\n     * @return {Boolean}\n     * If an entry with the given x-value or the given y-value exists.\n     */\n    hasEither(x, y) {\n        return this.hasX(x) || this.hasY(y);\n    }\n\n    /**\n     * Tests if an entry with the given x- and y-values exists. At least one of\n     * them must be provided.\n     *\n     * @param {Object} conf\n     * The configuration object.\n     *\n     * @param {*} [conf.x]\n     * The x-value.\n     *\n     * @param {*} [conf.y]\n     * The y-value.\n     *\n     * @return {Boolean}\n     * If an entry with the given x- and y-values exists.\n     */\n    has({x = EMPTY, y = EMPTY} = {}) {\n        if (x === EMPTY) {\n            return this.hasY(y);\n        } else if (y === EMPTY) {\n            return this.hasX(x);\n        } else {\n            return this.hasPair(x, y);\n        }\n    }\n\n    /**\n     * Removes any previous entries with the given x-value or the given y-value\n     * and connect x and y.\n     *\n     * @param {*} x\n     * The x-value.\n     *\n     * @param {*} y\n     * The y-value.\n     */\n    set(x, y) {\n        this.deleteX(x);\n        this.deleteY(y);\n        this.add(x, y);\n    }\n\n    /**\n     * Yields all x-values of this map.\n     *\n     * @abstract\n     */\n    * xs() {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Yields all y-values of this map.\n     */\n    * ys() {\n        yield* this.xToY.values();\n    }\n\n    /**\n     * Yields all x-y-entries of this map.\n     *\n     * @abstract\n     */\n    * entries() {\n        throw new Error(\"Calling an abstract method.\");\n    }\n\n    /**\n     * Yields all x-y-entries of this map.\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n}\n\n// Make TolkienMaps obsservable\nObject.assign(TolkienMap.prototype, observableExtendedMixin);"
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EMPTY",
    "memberof": "src/tolkien/TolkienMap.js",
    "longname": "src/tolkien/TolkienMap.js~EMPTY",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tolkien/TolkienMap.js",
    "importStyle": null,
    "description": "Signalizes that a parameter was not supplied.",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TolkienMap",
    "memberof": "src/tolkien/TolkienMap.js",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tolkien/TolkienMap.js",
    "importStyle": "TolkienMap",
    "description": "An abstract class for bidirectional maps. The name is inspired by\n\"The Hobbit or There and Back Again\" by J. R. R. Tolkien.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#constructor",
    "access": null,
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "XCon",
        "description": "The constructor to use for the xToY map."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "YCon",
        "description": "The constructor to use for the yToX map."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "initialValues",
        "description": "The initial entries of the map. Those are added to the map in the order\nspecified by the array."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "xToY",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#xToY",
    "access": "private",
    "description": "Maps from x-values to y-values.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Map",
        "GumpMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "yToX",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#yToX",
    "access": "private",
    "description": "Maps from y-values to x-values.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Map",
        "GumpMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "eventManager",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#eventManager",
    "access": "private",
    "description": "Handles events and listeners.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "EventManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#size",
    "access": null,
    "description": "The number of entries in this map.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#add",
    "access": null,
    "description": "Connects the given values.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TolkienMap"
      ],
      "spread": false,
      "description": "This map to make the method chainable."
    },
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If this operation changed the map an event is fired. Its source is this\nmap, the type is \"add\" and the data is an object containing the provided\nx and y parameters."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addImp",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#addImp",
    "access": "private",
    "description": "Called by the add template method. Subclasses should implement the actual\ninclusion of the given pair in this method.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#clear",
    "access": null,
    "description": "Removes all entries from this map.",
    "lineNumber": 123,
    "params": [],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the map was changed by this operation, an event is triggered. The\nsource is this map, the type is \"clear\" and the data is an array of the\ndeleted entries."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteX",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#deleteX",
    "access": null,
    "description": "Removes all entries with the given x-value.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteY",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#deleteY",
    "access": null,
    "description": "Removes all entries with the given y-value.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deletePair",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#deletePair",
    "access": null,
    "description": "Removes the entry mapping the x-value to the y-value.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#delete",
    "access": null,
    "description": "Removes the entries with the given x- and y-value. At least one of them\nmust be provided.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.y",
        "description": "The y-value."
      }
    ],
    "emits": [
      {
        "types": [
          "Event"
        ],
        "description": "If the map was changed by this operation and event is triggered. Its\nsource is this map, the type is \"delete\" and the data is an object. It\ncontains the given x- and y-values and it has a property deleted listing\nthe removed entries."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertXToY",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#convertXToY",
    "access": null,
    "description": "Returns the y-values that correspond to x.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of the corresponding y-values."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertYToX",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#convertYToX",
    "access": null,
    "description": "Returns the x-value that correspond to y.",
    "lineNumber": 245,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of the corresponding x-values."
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasX",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#hasX",
    "access": null,
    "description": "Tests if an entry with the given x-value exists.",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If an entry with the given x-value exists."
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasY",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#hasY",
    "access": null,
    "description": "Tests if an entry with the given y-value exists.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If an entry with the given y-value exists."
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPair",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#hasPair",
    "access": null,
    "description": "Tests if an entry with the given x- and y-value exists.",
    "lineNumber": 287,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If an entry with the given x- and y-value exists."
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasEither",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#hasEither",
    "access": null,
    "description": "Tests if an entry with the given x-value or the given y-value exists.",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If an entry with the given x-value or the given y-value exists."
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "has",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#has",
    "access": null,
    "description": "Tests if an entry with the given x- and y-values exists. At least one of\nthem must be provided.",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "conf",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "conf.y",
        "description": "The y-value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If an entry with the given x- and y-values exists."
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#set",
    "access": null,
    "description": "Removes any previous entries with the given x-value or the given y-value\nand connect x and y.",
    "lineNumber": 343,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-value."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "xs",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#xs",
    "access": null,
    "description": "Yields all x-values of this map.",
    "lineNumber": 354,
    "params": [],
    "abstract": true,
    "generator": true
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ys",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#ys",
    "access": null,
    "description": "Yields all y-values of this map.",
    "lineNumber": 361,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entries",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#entries",
    "access": null,
    "description": "Yields all x-y-entries of this map.",
    "lineNumber": 370,
    "params": [],
    "abstract": true,
    "generator": true
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/tolkien/TolkienMap.js~TolkienMap",
    "longname": "src/tolkien/TolkienMap.js~TolkienMap#[Symbol.iterator]",
    "access": null,
    "description": "Yields all x-y-entries of this map.",
    "lineNumber": 377,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tolkien/tolkien.js",
    "memberof": null,
    "longname": "src/tolkien/tolkien.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import \"babel-regenerator-runtime\";\n\nexport Tolkien1To1Map from \"./Tolkien1To1Map.js\";\nexport Tolkien1ToNMap from \"./Tolkien1ToNMap.js\";\nexport TolkienMToNMap from \"./TolkienMToNMap.js\";\n\nimport Tolkien1To1Map from \"./Tolkien1To1Map.js\";\nimport Tolkien1ToNMap from \"./Tolkien1ToNMap.js\";\nimport TolkienMToNMap from \"./TolkienMToNMap.js\";\n\n/**\n * Returns the largest map type of the two given maps. In descending order those\n * are TolkienMToNMap, Tolkien1ToNMap and Tolkien1To1Map.\n *\n * @param {TolkienMap} map1\n * The first map.\n *\n * @param {TolkienMap} map2\n * The second map.\n *\n * @return {Function}\n * The constructor of the largest map type.\n */\nfunction maxMapType(map1, map2) {\n    if (map1 instanceof TolkienMToNMap || map2 instanceof TolkienMToNMap) {\n        return TolkienMToNMap;\n    } else if (map1 instanceof Tolkien1ToNMap || map2 instanceof Tolkien1ToNMap) {\n        return Tolkien1ToNMap;\n    } else {\n        return Tolkien1To1Map;\n    }\n}\n\n/**\n * Composes the given relations. If a relation between A and B and another one\n * between B and C is passed in, this function returns a relation between A and\n * C.\n *\n * @param {Iterable} maps\n * The maps to compose.\n *\n * @return {TolkienMap}\n * The composed relation.\n */\nexport function compose(maps) {\n    return [...maps].reduce((aToB, bToC) => {\n        const result = new (maxMapType(aToB, bToC))();\n        for (let [a, b] of aToB) {\n            for (let c of bToC.convertXToY(b)) {\n                result.add(a, c);\n            }\n        }\n        return result;\n    });\n}"
  },
  {
    "__docId__": 220,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "maxMapType",
    "memberof": "src/tolkien/tolkien.js",
    "longname": "src/tolkien/tolkien.js~maxMapType",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tolkien/tolkien.js",
    "importStyle": null,
    "description": "Returns the largest map type of the two given maps. In descending order those\nare TolkienMToNMap, Tolkien1ToNMap and Tolkien1To1Map.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "TolkienMap"
        ],
        "spread": false,
        "optional": false,
        "name": "map1",
        "description": "The first map."
      },
      {
        "nullable": null,
        "types": [
          "TolkienMap"
        ],
        "spread": false,
        "optional": false,
        "name": "map2",
        "description": "The second map."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The constructor of the largest map type."
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "compose",
    "memberof": "src/tolkien/tolkien.js",
    "longname": "src/tolkien/tolkien.js~compose",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tolkien/tolkien.js",
    "importStyle": "{compose}",
    "description": "Composes the given relations. If a relation between A and B and another one\nbetween B and C is passed in, this function returns a relation between A and\nC.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "maps",
        "description": "The maps to compose."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TolkienMap"
      ],
      "spread": false,
      "description": "The composed relation."
    },
    "generator": false
  },
  {
    "__docId__": 222,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tortilla/TortillaGeneratorFunction.js",
    "memberof": null,
    "longname": "src/tortilla/TortillaGeneratorFunction.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import TortillaWrapper from \"./TortillaWrapper.js\";\n\n/**\n * A wrapper for generator functions.\n */\nexport default class TortillaGeneratorFunction extends TortillaWrapper {\n\n    /**\n     * @param {GeneratorFunction} f\n     * The function to wrap.\n     */\n    constructor(f) {\n        super();\n\n        /**\n         * The wrapped function.\n         *\n         * @type {GeneratorFunction}\n         * @private\n         */\n        this.f = f;\n    }\n\n    /**\n     * Partially applies the given parameters to the wrapped generator function.\n     *\n     * @param {...*} outer\n     * The parameters to apply.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    apply(...outer) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* (...inner) {\n            const params = outer.concat(inner);\n            yield* that.f(...params);\n        });\n    }\n\n    /**\n     * Turns this wrapper into an iterator. For this to work, the wrapped\n     * function must not expect any more parameters.\n     */\n    [Symbol.iterator]() {\n        return this.f();\n    }\n}"
  },
  {
    "__docId__": 223,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TortillaGeneratorFunction",
    "memberof": "src/tortilla/TortillaGeneratorFunction.js",
    "longname": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tortilla/TortillaGeneratorFunction.js",
    "importStyle": "TortillaGeneratorFunction",
    "description": "A wrapper for generator functions.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/tortilla/TortillaWrapper.js~TortillaWrapper"
    ]
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction",
    "longname": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "GeneratorFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to wrap."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "f",
    "memberof": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction",
    "longname": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction#f",
    "access": "private",
    "description": "The wrapped function.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "GeneratorFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "apply",
    "memberof": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction",
    "longname": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction#apply",
    "access": null,
    "description": "Partially applies the given parameters to the wrapped generator function.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "outer",
        "description": "The parameters to apply."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction",
    "longname": "src/tortilla/TortillaGeneratorFunction.js~TortillaGeneratorFunction#[Symbol.iterator]",
    "access": null,
    "description": "Turns this wrapper into an iterator. For this to work, the wrapped\nfunction must not expect any more parameters.",
    "lineNumber": 45,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tortilla/TortillaIterable.js",
    "memberof": null,
    "longname": "src/tortilla/TortillaIterable.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import TortillaWrapper from \"./TortillaWrapper.js\";\n\n/**\n * A wrapper for iterables.\n */\nexport default class TortillaIterable extends TortillaWrapper {\n\n    /**\n     * @param {Iterable} iterable\n     * The iterable to wrap.\n     */\n    constructor(iterable) {\n        super();\n\n        /**\n         * The wrapped iterable.\n         *\n         * @type {Iterable}\n         * @private\n         */\n        this.iterable = iterable;\n    }\n\n    /**\n     * Turns this wrapper into an iterator.\n     */\n    [Symbol.iterator]() {\n        return this.iterable[Symbol.iterator]();\n    }\n}"
  },
  {
    "__docId__": 229,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TortillaIterable",
    "memberof": "src/tortilla/TortillaIterable.js",
    "longname": "src/tortilla/TortillaIterable.js~TortillaIterable",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tortilla/TortillaIterable.js",
    "importStyle": "TortillaIterable",
    "description": "A wrapper for iterables.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/tortilla/TortillaWrapper.js~TortillaWrapper"
    ]
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tortilla/TortillaIterable.js~TortillaIterable",
    "longname": "src/tortilla/TortillaIterable.js~TortillaIterable#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable",
        "description": "The iterable to wrap."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 231,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "iterable",
    "memberof": "src/tortilla/TortillaIterable.js~TortillaIterable",
    "longname": "src/tortilla/TortillaIterable.js~TortillaIterable#iterable",
    "access": "private",
    "description": "The wrapped iterable.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/tortilla/TortillaIterable.js~TortillaIterable",
    "longname": "src/tortilla/TortillaIterable.js~TortillaIterable#[Symbol.iterator]",
    "access": null,
    "description": "Turns this wrapper into an iterator.",
    "lineNumber": 27,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tortilla/TortillaIterator.js",
    "memberof": null,
    "longname": "src/tortilla/TortillaIterator.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import \"babel-regenerator-runtime\"; // babel bug\n\nimport TortillaWrapper from \"./TortillaWrapper.js\";\n\n/**\n * A wrapper for iterators.\n */\nexport default class TortillaIterator extends TortillaWrapper {\n\n    /**\n     * @param {Iterator} iterator\n     * The iterator to wrap.\n     */\n    constructor(iterator) {\n        super();\n\n        /**\n         * Collects the values yielded by the iterator.\n         *\n         * @type {Array}\n         * @private\n         */\n        this.before = [];\n\n        /**\n         * The wrapped iterator.\n         *\n         * @type {Iterator}\n         * @private\n         */\n        this.iterator = iterator;\n    }\n\n    /**\n     * Turns this wrapper into an iterator.\n     */\n    * [Symbol.iterator]() {\n        yield* this.before;\n        for (let value of this.iterator) {\n            this.before.push(value);\n            yield value;\n        }\n    }\n}"
  },
  {
    "__docId__": 234,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TortillaIterator",
    "memberof": "src/tortilla/TortillaIterator.js",
    "longname": "src/tortilla/TortillaIterator.js~TortillaIterator",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tortilla/TortillaIterator.js",
    "importStyle": "TortillaIterator",
    "description": "A wrapper for iterators.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/tortilla/TortillaWrapper.js~TortillaWrapper"
    ]
  },
  {
    "__docId__": 235,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tortilla/TortillaIterator.js~TortillaIterator",
    "longname": "src/tortilla/TortillaIterator.js~TortillaIterator#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterator"
        ],
        "spread": false,
        "optional": false,
        "name": "iterator",
        "description": "The iterator to wrap."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "before",
    "memberof": "src/tortilla/TortillaIterator.js~TortillaIterator",
    "longname": "src/tortilla/TortillaIterator.js~TortillaIterator#before",
    "access": "private",
    "description": "Collects the values yielded by the iterator.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "iterator",
    "memberof": "src/tortilla/TortillaIterator.js~TortillaIterator",
    "longname": "src/tortilla/TortillaIterator.js~TortillaIterator#iterator",
    "access": "private",
    "description": "The wrapped iterator.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Iterator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/tortilla/TortillaIterator.js~TortillaIterator",
    "longname": "src/tortilla/TortillaIterator.js~TortillaIterator#[Symbol.iterator]",
    "access": null,
    "description": "Turns this wrapper into an iterator.",
    "lineNumber": 37,
    "params": [],
    "generator": true
  },
  {
    "__docId__": 239,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tortilla/TortillaWrapper.js",
    "memberof": null,
    "longname": "src/tortilla/TortillaWrapper.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from \"lodash/fp\";\n\nimport TortillaGeneratorFunction from \"./TortillaGeneratorFunction.js\";\n\n/**\n * A wrapper for iterables, iterators and generator functions.\n */\nexport default class TortillaWrapper {\n\n    /**\n     *\n     */\n    constructor() {}\n\n    /**\n     * Tests if any values are contained.\n     *\n     * @return {Boolean}\n     * If any values are contained.\n     */\n    isEmpty() {\n        return this.head() === undefined;\n    }\n\n    /**\n     * Returns the first value.\n     *\n     * @return {*}\n     * The first value.\n     */\n    head() {\n        const [value] = this[Symbol.iterator]();\n        return value;\n    }\n\n    /**\n     * Drops the first value.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    tail() {\n        return this.drop(1);\n    }\n\n    /**\n     * Bundles n values at a time in an array.\n     *\n     * @param {Number} n\n     * How many values to wrap.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    chunk(n) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            const iterator = that[Symbol.iterator]();\n            while (true) {\n                const chunk = [];\n                for (let i = 0; i < n; i++) {\n                    const {value, done} = iterator.next();\n                    if (done) break;\n                    chunk.push(value);\n                }\n                if (chunk.length === 0) return;\n                yield chunk;\n            }\n        });\n    }\n\n    /**\n     * Removes all values matching the given values.\n     *\n     * @param {*} values\n     * The values to remove.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    without(values) {\n        return this.reject(x => values.includes(x));\n    }\n\n    /**\n     * Removes all falsy values.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    compact() {\n        return this.filter(x => x);\n    }\n\n    /**\n     * Keeps only the values in the given range.\n     *\n     * @param {Number} start\n     * The index of the first value to keep.\n     *\n     * @param {Number} end\n     * The index of the first value to drop again.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    slice(start, end) {\n        return this.drop(start).take(end - start);\n    }\n\n    /**\n     * Drops the first n values.\n     *\n     * @param {Number} n\n     * How many values to drop.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    drop(n) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            const iterator = that[Symbol.iterator]();\n            for (let i = 0; i < n; i++) {\n                const {done} = iterator.next();\n                if (done) return;\n            }\n            yield* iterator;\n        });\n    }\n\n    /**\n     * Drops the values until the predicate is false.\n     *\n     * @param {Function} predicate\n     * The testing function.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    dropWhile(predicate) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            const iterator = that[Symbol.iterator]();\n            let value, done;\n            do {\n                ({value, done} = iterator.next());\n                if (done) return;\n            } while (predicate(value));\n            yield value;\n            yield* iterator;\n        });\n    }\n\n    /**\n     * Keeps only the first n values.\n     *\n     * @param {Number} n\n     * How many values to keep.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    take(n) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            const iterator = that[Symbol.iterator]();\n            for (let i = 0; i < n; i++) {\n                const {value, done} = iterator.next();\n                if (done) return;\n                yield value;\n            }\n        });\n    }\n\n    /**\n     * Keeps the values until the predicate is false.\n     *\n     * @param {Function} predicate\n     * The testing function.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    takeWhile(predicate) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            const iterator = that[Symbol.iterator]();\n            while (true) {\n                const {value, done} = iterator.next();\n                if (done || !predicate(value)) return;\n                yield value;\n            }\n        });\n    }\n\n    /**\n     * Keeps only value for which the predicate is true.\n     *\n     * @param {Function} predicate\n     * The testing function.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    filter(predicate) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            for (let value of that) {\n                if (predicate(value)) {\n                    yield value;\n                }\n            }\n        });\n    }\n\n    /**\n     * Drops all values for which the predicate is true.\n     *\n     * @param {Function} predicate\n     * The testing function.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    reject(predicate) {\n        return this.filter(_.negate(predicate));\n    }\n\n    /**\n     * Applies the given function to a value before yielding it.\n     *\n     * @param {Function} iteratee\n     * The mapping function.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    map(iteratee) {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            for (let value of that) {\n                yield iteratee(value);\n            }\n        });\n    }\n\n    /**\n     * Yields values of an array separately.\n     *\n     * @return {TortillaWrapper}\n     * The new wrapper.\n     */\n    flatten() {\n        const that = this;\n        return new TortillaGeneratorFunction(function* () {\n            for (let value of that) {\n                yield* _.castArray(value);\n            }\n        });\n    }\n\n    /**\n     * Turns this wrapper into an iterator.\n     *\n     * @abstract\n     */\n    [Symbol.iterator]() {\n        throw new Error(\"Calling an abstract function.\");\n    }\n}\n"
  },
  {
    "__docId__": 240,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TortillaWrapper",
    "memberof": "src/tortilla/TortillaWrapper.js",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tortilla/TortillaWrapper.js",
    "importStyle": "TortillaWrapper",
    "description": "A wrapper for iterables, iterators and generator functions.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 241,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#isEmpty",
    "access": null,
    "description": "Tests if any values are contained.",
    "lineNumber": 21,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "If any values are contained."
    },
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "head",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#head",
    "access": null,
    "description": "Returns the first value.",
    "lineNumber": 31,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The first value."
    },
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "tail",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#tail",
    "access": null,
    "description": "Drops the first value.",
    "lineNumber": 42,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chunk",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#chunk",
    "access": null,
    "description": "Bundles n values at a time in an array.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "How many values to wrap."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "without",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#without",
    "access": null,
    "description": "Removes all values matching the given values.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The values to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "compact",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#compact",
    "access": null,
    "description": "Removes all falsy values.",
    "lineNumber": 91,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slice",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#slice",
    "access": null,
    "description": "Keeps only the values in the given range.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The index of the first value to keep."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The index of the first value to drop again."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drop",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#drop",
    "access": null,
    "description": "Drops the first n values.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "How many values to drop."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 250,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dropWhile",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#dropWhile",
    "access": null,
    "description": "Drops the values until the predicate is false.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The testing function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "take",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#take",
    "access": null,
    "description": "Keeps only the first n values.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "How many values to keep."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "takeWhile",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#takeWhile",
    "access": null,
    "description": "Keeps the values until the predicate is false.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The testing function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 253,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filter",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#filter",
    "access": null,
    "description": "Keeps only value for which the predicate is true.",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The testing function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reject",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#reject",
    "access": null,
    "description": "Drops all values for which the predicate is true.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "predicate",
        "description": "The testing function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#map",
    "access": null,
    "description": "Applies the given function to a value before yielding it.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iteratee",
        "description": "The mapping function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 256,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatten",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#flatten",
    "access": null,
    "description": "Yields values of an array separately.",
    "lineNumber": 254,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The new wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 257,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "[Symbol.iterator]",
    "memberof": "src/tortilla/TortillaWrapper.js~TortillaWrapper",
    "longname": "src/tortilla/TortillaWrapper.js~TortillaWrapper#[Symbol.iterator]",
    "access": null,
    "description": "Turns this wrapper into an iterator.",
    "lineNumber": 268,
    "params": [],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 258,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tortilla/tortilla.js",
    "memberof": null,
    "longname": "src/tortilla/tortilla.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import TortillaGeneratorFunction from \"./TortillaGeneratorFunction.js\";\nimport TortillaIterable          from \"./TortillaIterable.js\";\nimport TortillaIterator          from \"./TortillaIterator.js\";\nimport TortillaWrapper           from \"./TortillaWrapper.js\";\n\n/**\n * Tests if the given value is wrapped already.\n *\n * @param {*} v\n * The value to test.\n *\n * @return {Boolean}\n * Whether the given value is wrapped already.\n *\n * @ignore\n */\nconst isWrapped = function (v) {\n    return v instanceof TortillaWrapper;\n};\n\n/**\n * Tests if the given value is a function returning an iterator.\n *\n * @param {*} v\n * The value to test.\n *\n * @return {Boolean}\n * Whether the given value is a generator function.\n *\n * @ignore\n */\nconst isGeneratorFunction = function (v) {\n    return typeof v === \"function\" && v()[Symbol.iterator];\n};\n\n/**\n * Tests if the given value is an iterable.\n *\n * @param {*} v\n * The value to test.\n *\n * @return {Boolean}\n * Whether the given value is an iterable.\n *\n * @ignore\n */\nconst isIterable = function (v) {\n    return v !== undefined &&\n           v !== null &&\n           typeof v[Symbol.iterator] === \"function\" &&\n           v[Symbol.iterator]() !== v;\n};\n\n/**\n * Tests if the given value is an iterator. While those are usually also\n * iterable, they cannot be reset.\n *\n * @param {*} v\n * The value to test.\n *\n * @return {Boolean}\n * Whether the given value is an iterator.\n *\n * @ignore\n */\nconst isIterator = function (v) {\n    return v !== undefined &&\n           v !== null &&\n           typeof v[Symbol.iterator] === \"function\" &&\n           v[Symbol.iterator]() === v;\n};\n\n/**\n * Wraps the given value into an appropriate wrapper.\n *\n * @param {*} toWrap\n * The value to wrap.\n *\n * @return {TortillaWrapper}\n * The wrapped value.\n *\n * @throws {Error}\n * If the value cannot be wrapped.\n */\nexport default function tortilla(toWrap) {\n    if (isWrapped(toWrap)) {\n        return toWrap;\n    } else if (isGeneratorFunction(toWrap)) {\n        return new TortillaGeneratorFunction(toWrap);\n    } else if (isIterable(toWrap)) {\n        return new TortillaIterable(toWrap);\n    } else if (isIterator(toWrap)) {\n        return new TortillaIterator(toWrap);\n    } else {\n        return new TortillaIterable([]);\n    }\n};\n\n/**\n * Does not yield any values.\n *\n * @type {TortillaWrapper}\n */\ntortilla.empty = new TortillaIterable([]);\n\n/**\n * An infinite generator that always yields the same value.\n *\n * @param {*} value\n * The value to yield.\n *\n * @return {TortillaWrapper}\n * The wrapper.\n */\ntortilla.constant = function (value) {\n    return new TortillaGeneratorFunction(function* () {\n        while (true) {\n            yield value;\n        }\n    });\n};\n\n/**\n * Yields the values start, start + step, start + 2 * step, ... while they\n * are less than end.\n *\n * @param {Number} [start=0]\n * The starting value.\n *\n * @param {Number} [end=Infinity]\n * The final, not included value.\n *\n * @param {Number} [step=1]\n * The size of each step.\n *\n * @return {TortillaWrapper}\n * The wrapper.\n */\ntortilla.range = function (start = 0, end = Number.POSITIVE_INFINITY, step = 1) {\n    return new TortillaGeneratorFunction(function* () {\n        for (let i = start; i < end; i += step) {\n            yield i;\n        }\n    });\n};\n\n/**\n * Concatenates the given iterables. First the results of the first iterable are\n * yielded, then the ones of the next and so forth.\n *\n * @param {Iterable} iterables\n * An iterable containing the iterables to concatenate.\n *\n * @return {TortillaWrapper}\n * The resulting wrapper.\n */\ntortilla.concat = function (iterables) {\n    return new TortillaGeneratorFunction(function* () {\n        for (let iterable of iterables) {\n            yield* iterable;\n        }\n    });\n};\n\n/**\n * Combines the results of the given iterables in an array. At index 0, the\n * results of the first iterable are yielded, at index 1 the ones of the next\n * and so forth.\n *\n * @param {Iterable} iterables\n * An iterable containing the iterables to zip.\n *\n * @return {TortillaWrapper}\n * The resulting wrapper.\n */\ntortilla.zip = function (iterables) {\n    return tortilla.zipWith((...xs) => xs, iterables);\n};\n\n/**\n * Combines the results of the given iterables using the given function. The\n * first argument of the function are the results of the first iterable, the\n * second argument is determined by the second iterable and so forth.\n *\n * @param {Function} iteratee\n * The function to use for zipping.\n *\n * @param {Iterable} iterables\n * An iterable containing the iterables to zip.\n *\n * @return {TortillaWrapper}\n * The resulting wrapper.\n */\ntortilla.zipWith = function (iteratee, iterables) {\n    const iterators = iterables.map(x => x[Symbol.iterator]());\n    return new TortillaGeneratorFunction(function* () {\n        while (true) {\n            const results = iterators.map(x => x.next());\n            if (results.some(x => x.done)) return;\n            yield iteratee(...results.map(x => x.value));\n        }\n    });\n};\n"
  },
  {
    "__docId__": 259,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isWrapped",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~isWrapped",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Tests if the given value is wrapped already.",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given value is wrapped already."
    },
    "generator": false
  },
  {
    "__docId__": 260,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isGeneratorFunction",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~isGeneratorFunction",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Tests if the given value is a function returning an iterator.",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given value is a generator function."
    },
    "generator": false
  },
  {
    "__docId__": 261,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isIterable",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~isIterable",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Tests if the given value is an iterable.",
    "lineNumber": 47,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given value is an iterable."
    },
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isIterator",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~isIterator",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Tests if the given value is an iterator. While those are usually also\niterable, they cannot be reset.",
    "lineNumber": 66,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The value to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given value is an iterator."
    },
    "generator": false
  },
  {
    "__docId__": 263,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tortilla",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~tortilla",
    "access": null,
    "export": true,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": "tortilla",
    "description": "Wraps the given value into an appropriate wrapper.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "toWrap",
        "description": "The value to wrap."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The wrapped value."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the value cannot be wrapped."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "constant",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~constant",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "An infinite generator that always yields the same value.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to yield."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "range",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~range",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Yields the values start, start + step, start + 2 * step, ... while they\nare less than end.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "start",
        "description": "The starting value."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Infinity",
        "defaultRaw": "Infinity",
        "name": "end",
        "description": "The final, not included value."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": "The size of each step."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 266,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "concat",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~concat",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Concatenates the given iterables. First the results of the first iterable are\nyielded, then the ones of the next and so forth.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterables",
        "description": "An iterable containing the iterables to concatenate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The resulting wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 267,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "zip",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~zip",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Combines the results of the given iterables in an array. At index 0, the\nresults of the first iterable are yielded, at index 1 the ones of the next\nand so forth.",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterables",
        "description": "An iterable containing the iterables to zip."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The resulting wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "zipWith",
    "memberof": "src/tortilla/tortilla.js",
    "longname": "src/tortilla/tortilla.js~zipWith",
    "access": null,
    "export": false,
    "importPath": "@ignavia/util/src/tortilla/tortilla.js",
    "importStyle": null,
    "description": "Combines the results of the given iterables using the given function. The\nfirst argument of the function are the results of the first iterable, the\nsecond argument is determined by the second iterable and so forth.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iteratee",
        "description": "The function to use for zipping."
      },
      {
        "nullable": null,
        "types": [
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterables",
        "description": "An iterable containing the iterables to zip."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TortillaWrapper"
      ],
      "spread": false,
      "description": "The resulting wrapper."
    },
    "generator": false
  },
  {
    "__docId__": 269,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/util.js",
    "memberof": null,
    "longname": "src/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import \"babel-regenerator-runtime\";\r\nimport \"core-js\";\r\n\r\nexport {cloneableSymbols, cloneableMixin, cloneableExtendedMixin}    from \"./Cloneable.js\";\r\nexport Cloner                                                        from \"./Cloner.js\";\r\nexport Color, {predefinedColors}                                     from \"./Color.js\";\r\nexport Event                                                         from \"./Event.js\";\r\nexport EventManager                                                  from \"./EventManager.js\";\r\nexport {extensibleSymbols, extensibleMixin, extensibleExtendedMixin} from \"./Extensible.js\";\r\nexport *                                                             from \"./gump/gump.js\";\r\nexport IDGenerator                                                   from \"./IDGenerator.js\";\r\nexport {observableSymbols, observableMixin, observableExtendedMixin} from \"./Observable.js\";\r\nexport Plugin                                                        from \"./Plugin.js\";\r\nexport *                                                             from \"./tolkien/tolkien.js\";\r\nexport tortilla                                                      from \"./tortilla/tortilla.js\";\r\n"
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 312,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 314,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 315,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 316,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 317,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 319,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 320,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 321,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 322,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 323,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 324,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 325,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 326,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]